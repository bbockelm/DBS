@create-dbs3-schema-in-dbs2-db
@auto_inc_trigs

INSERT INTO PRIMARY_DS_TYPES ( PRIMARY_DS_TYPE_ID,  PRIMARY_DS_TYPE) SELECT ID, TYPE FROM PRIMARYDSTYPE;
INSERT INTO PRIMARY_DATASETS(PRIMARY_DS_ID, PRIMARY_DS_NAME, PRIMARY_DS_TYPE_ID, CREATION_DATE, CREATE_BY)  SELECT ID, NAME, TYPE, CREATIONDATE, CREATEDBY FROM PRIMARYDATASET;


INSERT INTO APPLICATION_EXECUTABLES (APP_EXEC_ID, APP_NAME) SELECT ID, EXECUTABLENAME FROM APPEXECUTABLE;
INSERT INTO RELEASE_VERSIONS ( RELEASE_VERSION_ID, RELEASE_VERSION ) SELECT ID, VERSION FROM APPVERSION;
--ALTER TABLE PARAMETER_SET_HASHES MODIFY (NAME VARCHAR2(100));
--ALTER TABLE PARAMETER_SET_HASHES MODIFY (PSET_HASH  VARCHAR2(65));
INSERT INTO PARAMETER_SET_HASHES ( PARAMETER_SET_HASH_ID, PSET_HASH, NAME ) SELECT ID, HASH, NAME FROM QUERYABLEPARAMETERSET;
--FAKING APPLICATIONFAMILY AS OUTPUT_MODULE_LABEL, THIS KEEPS THE UNIQUENESS
INSERT INTO OUTPUT_MODULE_CONFIGS ( OUTPUT_MOD_CONFIG_ID, APP_EXEC_ID, RELEASE_VERSION_ID, PARAMETER_SET_HASH_ID, OUTPUT_MODULE_LABEL) SELECT ID, EXECUTABLENAME, APPLICATIONVERSION, PARAMETERSETID, APPLICATIONFAMILY FROM ALGORITHMCONFIG;


INSERT INTO PHYSICS_GROUPS ( PHYSICS_GROUP_ID, PHYSICS_GROUP_NAME, PHYSICS_GROUP_CONVENER ) SELECT ID, PHYSICSGROUPNAME, PHYSICSGROUPCONVENER FROM PHYSICSGROUP;

--WE WILL USE THE STATUS (FROM DBS-2) TO FILL IN TYPE IN DBS-3, LATER WE CAN FIX THIS

--SET VALID WHERE TRYPE = VALID ETC....
INSERT INTO DATASET_ACCESS_TYPES (DATASET_ACCESS_TYPE_ID, DATASET_ACCESS_TYPE) SELECT ID, STATUS FROM PROCDSSTATUS;
INSERT INTO DATA_TIERS ( DATA_TIER_ID, DATA_TIER_NAME ) SELECT ID, NAME FROM DATATIER;
INSERT INTO ACQUISITION_ERAS ( ACQUISITION_ERA_NAME ) SELECT DISTINCT AQUISITIONERA FROM PROCESSEDDATASET where AQUISITIONERA IS NOT NULL;
INSERT INTO PROCESSED_DATASETS ( PROCESSED_DS_NAME ) SELECT DISTINCT NAME FROM PROCESSEDDATASET;

--INSERT ALL DATASETS AS INVALID (IS_DATASET_VALID==0)

INSERT INTO DATASETS (
	 DATASET_ID,                               
	  DATASET,
	   IS_DATASET_VALID,                         
	    PRIMARY_DS_ID,                            
	     PROCESSED_DS_ID,                          
	      DATA_TIER_ID,          
	       DATASET_ACCESS_TYPE_ID,      
	        ACQUISITION_ERA_ID,
		 PHYSICS_GROUP_ID,
		  XTCROSSSECTION,
		   GLOBAL_TAG,
		    CREATION_DATE,
		     CREATE_BY,
		      LAST_MODIFICATION_DATE,
		       LAST_MODIFIED_BY
	)
SELECT DS.ID, '/' || P.NAME || '/' || DS.NAME || '/' || DT.NAME, 0, P.ID, PDS.PROCESSED_DS_ID, DT.ID, 1,
       ACQ.ACQUISITION_ERA_ID, PG.PHYSICS_GROUP_ID, DS.XTCROSSSECTION, DS.GLOBALTAG,
       DS.CREATIONDATE, PDCB.DISTINGUISHEDNAME, DS.LASTMODIFICATIONDATE, PDLM.DISTINGUISHEDNAME
       FROM PROCESSEDDATASET DS
       JOIN PRIMARYDATASET P
           ON P.ID=DS.PRIMARYDATASET
	   JOIN DATATIER DT
	       ON DT.ID=DS.DATATIER
	       JOIN PROCESSED_DATASETS PDS
	           ON PDS.PROCESSED_DS_NAME=DS.NAME
		   LEFT OUTER JOIN ACQUISITION_ERAS ACQ
		       ON ACQ.ACQUISITION_ERA_NAME=DS.AQUISITIONERA
		       LEFT OUTER JOIN PHYSICS_GROUPS PG
		           ON DS.PHYSICSGROUP=PG.PHYSICS_GROUP_ID
			   LEFT OUTER JOIN PERSON PDCB
			       ON DS.CREATEDBY=PDCB.ID
			       LEFT OUTER JOIN PERSON PDLM
			           ON DS.LASTMODIFIEDBY=PDLM.ID;   



--SET THE STATUS OF DATASETS AS VALID, IF THEY ARE MARKED AS 'VALID' IN DBS-2
UPDATE DATASETS DS SET DS.IS_DATASET_VALID=1 WHERE DS.DATASET_ID IN (SELECT PDS.ID FROM PROCESSEDDATASET PDS, PROCDSSTATUS ST WHERE ST.ID=PDS.STATUS AND ST.STATUS='VALID');
--SET THE TYPE OF DATASETS BASED ON "STATUS" IN DBS-2
UPDATE DATASETS DS SET DS.DATASET_ACCESS_TYPE_ID=(SELECT DATASET_ACCESS_TYPE_ID FROM DATASET_ACCESS_TYPES WHERE DATASET_ACCESS_TYPE='PRODUCTION') 
WHERE DS.DATASET_ID IN (SELECT PDS.ID FROM PROCESSEDDATASET PDS, PROCDSSTATUS ST WHERE ST.ID=PDS.STATUS AND ST.STATUS='PRODUCTION');

UPDATE DATASETS DS SET DS.DATASET_ACCESS_TYPE_ID=(SELECT DATASET_ACCESS_TYPE_ID FROM DATASET_ACCESS_TYPES WHERE DATASET_ACCESS_TYPE='DELETED') 
WHERE DS.DATASET_ID IN (SELECT PDS.ID FROM PROCESSEDDATASET PDS, PROCDSSTATUS ST WHERE ST.ID =PDS.STATUS AND ST.STATUS='DELETED');

UPDATE DATASETS DS SET DS.DATASET_ACCESS_TYPE_ID=(SELECT DATASET_ACCESS_TYPE_ID FROM DATASET_ACCESS_TYPES WHERE DATASET_ACCESS_TYPE='DEPRECATED') 
WHERE DS.DATASET_ID IN (SELECT PDS.ID FROM PROCESSEDDATASET PDS, PROCDSSTATUS ST WHERE ST.ID=PDS.STATUS AND ST.STATUS='DEPRECATED');

				   

INSERT INTO BLOCKS
(
  BLOCK_ID,                                 
   BLOCK_NAME,
    DATASET_ID,
     OPEN_FOR_WRITING, 
      BLOCK_SIZE,
       FILE_COUNT,
        CREATION_DATE,
	 CREATE_BY,
	  LAST_MODIFICATION_DATE,
	   ORIGIN_SITE_NAME
	  )
SELECT B.ID, B.NAME, B.DATASET, B.OPENFORWRITING, 
              B.BLOCKSIZE, B.NUMBEROFFILES, B.CREATIONDATE,
	             PDCB.DISTINGUISHEDNAME, B.LASTMODIFICATIONDATE,
		     'dbs.test.server'
		     FROM BLOCK B
		     LEFT OUTER JOIN PERSON PDCB
		         ON B.CREATEDBY=PDCB.ID;



INSERT INTO FILE_TYPES ( FILE_TYPE_ID,  FILE_TYPE ) SELECT ID, TYPE FROM FILETYPE;


INSERT INTO DBS3FILES
(
  FILE_ID,
   LOGICAL_FILE_NAME,
    IS_FILE_VALID,
     DATASET_ID,
      BLOCK_ID,
       FILE_TYPE_ID,
        CHECK_SUM,
	 EVENT_COUNT,
	  FILE_SIZE,
	   ADLER32,
	    MD5,
	     AUTO_CROSS_SECTION,
	      CREATION_DATE,
	       CREATE_BY,
	        LAST_MODIFICATION_DATE,
		 LAST_MODIFIED_BY
		 )
SELECT F.ID, F.LOGICALFILENAME, F.VALIDATIONSTATUS, F.DATASET, F.BLOCK,
       F.FILETYPE, F.CHECKSUM, F.NUMBEROFEVENTS, F.FILESIZE, F.ADLER32,
       F.MD5, F.AUTOCROSSSECTION, F.CREATIONDATE,
       PDCB.DISTINGUISHEDNAME, F.LASTMODIFICATIONDATE, PDLM.DISTINGUISHEDNAME
       FROM FILES F
       LEFT OUTER JOIN PERSON PDCB
           ON F.CREATEDBY=PDCB.ID
	   LEFT OUTER JOIN PERSON PDLM
	       ON F.LASTMODIFIEDBY=PDLM.ID;
			

RENAME FILES TO DBS2_FILES;
RENAME DBS3FILES TO FILES;

