-- DDL file generated by ./generate_oracle_deployable.sh on 03192008173650
-- ====================================================
-- ====================================================
-- ====================================================
PROMPT Creating Tables
REM ======================================================================
REM ===   Sql Script for Database : DBS_NEW_ERA
REM ===
REM === Build : 756
REM ======================================================================

CREATE TABLE Person
  (
    ID                    integer,
    Name                  varchar(100),
    DistinguishedName     varchar(500)      unique not null,
    ContactInfo           varchar(250),
    CreationDate          integer,
    CreatedBy             integer,
    LastModificationDate  integer,
    LastModifiedBy        integer,
    primary key(ID)
  );

REM ======================================================================

CREATE TABLE Role
  (
    ID                    integer,
    RoleName              varchar(100)      unique not null,
    RoleDescription       varchar(500)      not null,
    CreationDate          integer,
    CreatedBy             integer,
    LastModificationDate  integer,
    LastModifiedBy        integer,
    primary key(ID)
  );

REM ======================================================================

CREATE TABLE AssignedRole
  (
    ID                    integer,
    PersonID              integer   not null,
    RoleID                integer   not null,
    CreationDate          integer,
    CreatedBy             integer,
    LastModificationDate  integer,
    LastModifiedBy        integer,
    primary key(ID)
  );

REM ======================================================================

CREATE TABLE PhysicsGroup
  (
    ID                    integer,
    PhysicsGroupName      varchar(500)      unique not null,
    PhysicsGroupConvener  integer,
    CreationDate          integer,
    CreatedBy             integer,
    LastModificationDate  integer,
    LastModifiedBy        integer,
    primary key(ID)
  );

REM ======================================================================

CREATE TABLE SchemaVersion
  (
    ID                    integer,
    SchemaVersion         varchar(100)      unique not null,
    InstanceName          varchar(100)      unique not null,
    CreationDate          integer,
    CreatedBy             integer,
    LastModificationDate  integer,
    LastModifiedBy        integer,
    primary key(ID)
  );

REM ======================================================================

CREATE TABLE Runs
  (
    ID                    integer,
    RunNumber             integer   unique not null,
    NumberOfEvents        integer   not null,
    NumberOfLumiSections  integer   not null,
    TotalLuminosity       integer   not null,
    StoreNumber           integer   not null,
    StartOfRun            integer,
    EndOfRun              integer,
    CreatedBy             integer,
    CreationDate          integer,
    LastModifiedBy        integer,
    LastModificationDate  integer,
    primary key(ID)
  );

REM ======================================================================

CREATE TABLE DataTier
  (
    ID                    integer,
    Name                  varchar(100)      unique not null,
    LastModifiedBy        integer,
    LastModificationDate  integer,
    CreationDate          integer,
    CreatedBy             integer,
    primary key(ID)
  );

REM ======================================================================

CREATE TABLE LumiSection
  (
    ID                    integer,
    LumiSectionNumber     integer   not null,
    RunNumber             integer   not null,
    StartEventNumber      integer   not null,
    EndEventNumber        integer   not null,
    LumiStartTime         integer,
    LumiEndTime           integer,
    CreatedBy             integer,
    CreationDate          integer,
    LastModifiedBy        integer,
    LastModificationDate  integer,
    primary key(ID),
    unique(LumiSectionNumber,RunNumber)
  );

REM ======================================================================

CREATE TABLE TimeLog
  (
    ID                    integer,
    Action                varchar(500)      not null,
    Cause                 varchar(500)      not null,
    Effect                varchar(500)      not null,
    Description           varchar(1000)     not null,
    CreationDate          integer,
    CreatedBy             integer,
    LastModificationDate  integer,
    LastModifiedBy        integer,
    primary key(ID)
  );

REM ======================================================================

CREATE TABLE DataTierOrder
  (
    ID                    integer,
    DataTierOrder         varchar(250)      unique not null,
    Description           varchar(1000),
    CreationDate          integer,
    CreatedBy             integer,
    LastModificationDate  integer,
    LastModifiedBy        integer,
    primary key(ID)
  );

REM ======================================================================

CREATE TABLE ReasonCode
  (
    ReasonCode            integer   not null,
    Description           varchar(1000)     not null,
    CreationDate          integer,
    CreatedBy             integer,
    LastModificationDate  integer,
    LastModifiedBy        integer,
    primary key(ReasonCode)
  );

REM ======================================================================

CREATE TABLE RecycleBin
  (
    ID                    integer,
    Path                  varchar(500)      not null,
    BlockName             varchar(700)      not null,
    Xml                   CLOB,
    CreationDate          integer,
    CreatedBy             integer,
    LastModificationDate  integer,
    LastModifiedBy        integer,
    primary key(ID)
  );

REM ======================================================================

CREATE TABLE AppFamily
  (
    ID                    integer,
    FamilyName            varchar(100)      unique not null,
    CreatedBy             integer,
    CreationDate          integer,
    LastModifiedBy        integer,
    LastModificationDate  integer,
    primary key(ID)
  );

REM ======================================================================

CREATE TABLE AppVersion
  (
    ID                    integer,
    Version               varchar(100)      unique not null,
    CreatedBy             integer,
    CreationDate          integer,
    LastModifiedBy        integer,
    LastModificationDate  integer,
    primary key(ID)
  );

REM ======================================================================

CREATE TABLE AppExecutable
  (
    ID                    integer,
    ExecutableName        varchar(100)      unique not null,
    CreatedBy             integer,
    CreationDate          integer,
    LastModifiedBy        integer,
    LastModificationDate  integer,
    primary key(ID)
  );

REM ======================================================================

CREATE TABLE QueryableParameterSet
  (
    ID                    integer,
    Hash                  varchar(700)      unique not null,
    Name                  varchar(1000),
    Version               varchar(100),
    Type                  varchar(100),
    Annotation            varchar(1000),
    Content               CLOB,
    CreationDate          integer,
    CreatedBy             integer,
    LastModificationDate  integer,
    LastModifiedBy        integer,
    primary key(ID)
  );

REM ======================================================================

CREATE TABLE ParameterBinding
  (
    ID                    integer,
    Self                  integer   not null,
    Contains              integer   not null,
    CreatedBy             integer,
    CreationDate          integer,
    LastModifiedBy        integer,
    LastModificationDate  integer,
    primary key(ID)
  );

REM ======================================================================

CREATE TABLE TriggerPathDescription
  (
    ID                      integer,
    TriggerPathDescription  varchar(100)      unique not null,
    CreatedBy               integer,
    CreationDate            integer,
    LastModifiedBy          integer,
    LastModificationDate    integer,
    primary key(ID)
  );

REM ======================================================================

CREATE TABLE MCDescription
  (
    ID                    integer,
    MCChannelDescription  varchar(100)      not null,
    MCProduction          varchar(100),
    MCDecayChain          varchar(100),
    CreatedBy             integer,
    CreationDate          integer,
    LastModifiedBy        integer,
    LastModificationDate  integer,
    primary key(ID),
    unique(MCChannelDescription,MCProduction,MCDecayChain)
  );

REM ======================================================================

CREATE TABLE OtherDescription
  (
    ID                    integer,
    Description           varchar(100)      unique not null,
    CreatedBy             integer,
    CreationDate          integer,
    LastModifiedBy        integer,
    LastModificationDate  integer,
    primary key(ID)
  );

REM ======================================================================

CREATE TABLE FileStatus
  (
    ID                    integer,
    Status                varchar(100)      unique not null,
    CreationDate          integer,
    CreatedBy             integer,
    LastModificationDate  integer,
    LastModifiedBy        integer,
    primary key(ID)
  );

REM ======================================================================

CREATE TABLE FileType
  (
    ID                    integer,
    Type                  varchar(100)      unique not null,
    CreationDate          integer,
    CreatedBy             integer,
    LastModificationDate  integer,
    LastModifiedBy        integer,
    primary key(ID)
  );

REM ======================================================================

CREATE TABLE FileValidStatus
  (
    ID                    integer,
    Status                varchar(100)      unique not null,
    CreationDate          integer,
    CreatedBy             integer,
    LastModificationDate  integer,
    LastModifiedBy        integer,
    primary key(ID)
  );

REM ======================================================================

CREATE TABLE AnalysisDSType
  (
    ID                    integer,
    Type                  varchar(100)      unique not null,
    CreationDate          integer,
    CreatedBy             integer,
    LastModificationDate  integer,
    LastModifiedBy        integer,
    primary key(ID)
  );

REM ======================================================================

CREATE TABLE AnalysisDSStatus
  (
    ID                    integer,
    Status                varchar(100)      unique not null,
    CreationDate          integer,
    CreatedBy             integer,
    LastModificationDate  integer,
    LastModifiedBy        integer,
    primary key(ID)
  );

REM ======================================================================

CREATE TABLE AnalysisDSDef
  (
    ID                    integer,
    Name                  varchar(700)      unique not null,
    Path                  varchar(1000),
    Description           CLOB,
    LumiSections          CLOB,
    LumiSectionRanges     CLOB,
    Runs                  CLOB,
    RunsRanges            CLOB,
    Algorithms            varchar(1000),
    LFNs                  CLOB,
    UserCut               CLOB,
    CreationDate          integer,
    CreatedBy             integer,
    LastModificationDate  integer,
    LastModifiedBy        integer,
    primary key(ID)
  );

REM ======================================================================

CREATE TABLE CompositeADS
  (
    ID                    integer,
    Name                  varchar(500)      unique not null,
    Description           varchar(1000)     not null,
    CreatedBy             integer,
    CreationDate          integer,
    LastModifiedBy        integer,
    LastModificationDate  integer,
    primary key(ID)
  );

REM ======================================================================

CREATE TABLE StorageElement
  (
    ID                    integer,
    SEName                varchar(500)      unique not null,
    CreatedBy             integer,
    CreationDate          integer,
    LastModifiedBy        integer,
    LastModificationDate  integer,
    primary key(ID)
  );

REM ======================================================================

CREATE TABLE ProcDSStatus
  (
    ID                    integer,
    Status                varchar(100)      unique not null,
    CreationDate          integer,
    CreatedBy             integer,
    LastModificationDate  integer,
    LastModifiedBy        integer,
    primary key(ID)
  );

REM ======================================================================

CREATE TABLE PrimaryDSType
  (
    ID                    integer,
    Type                  varchar(100)      unique not null,
    CreationDate          integer,
    CreatedBy             integer,
    LastModificationDate  integer,
    LastModifiedBy        integer,
    primary key(ID)
  );

REM ======================================================================

CREATE TABLE QualityValues
  (
    ID                    integer,
    Value                 varchar(500)      unique not null,
    CreatedBy             integer,
    CreationDate          integer,
    LastModifiedBy        integer,
    LastModificationDate  integer,
    primary key(ID)
  );

REM ======================================================================

CREATE TABLE SubSystem
  (
    ID                    integer,
    Name                  varchar(500)      unique not null,
    Parent                varchar(500)      default 'CMS' not null,
    CreatedBy             integer,
    CreationDate          integer,
    LastModifiedBy        integer,
    LastModificationDate  integer,
    primary key(ID)
  );

REM ======================================================================

CREATE TABLE RunLumiQuality
  (
    ID                    integer,
    Run                   integer   not null,
    Lumi                  integer,
    SubSystem             integer   not null,
    DQValue               integer   not null,
    CreationDate          integer,
    CreatedBy             integer,
    LastModificationDate  integer,
    LastModifiedBy        integer,
    primary key(ID),
    unique(Run,Lumi,SubSystem)
  );

REM ======================================================================

CREATE TABLE RunLumiDQInt
  ( 
    ID                    integer,
    Run                   integer  not null,
    Lumi                  integer,
    SubSystem             integer  not null,
    IntDQValue            integer  not null,
    CreationDate          integer,
    CreatedBy             integer,
    LastModificationDate  integer,
    LastModifiedBy        integer,
    primary key(ID),
    unique(Run,Lumi,SubSystem)
  );

REM ======================================================================

CREATE TABLE QualityHistory
  (
    ID                    integer,
    HistoryOf             integer,
    HistoryTimeStamp      integer   not null,
    Run                   integer   not null,
    Lumi                  integer,
    SubSystem             integer   not null,
    DQValue               integer   not null,
    CreationDate          integer,
    CreatedBy             integer,
    LastModificationDate  integer,
    LastModifiedBy        integer,
    primary key(ID),
    unique(HistoryTimeStamp,Run,Lumi,SubSystem,DQValue)
  );

REM ======================================================================

CREATE TABLE QualityVersion
  (
    ID                    integer,
    Version               varchar(500)      unique not null,
    VersionTimeStamp      integer            unique not null,
    Description           varchar(1000),
    CreationDate          integer,
    CreatedBy             integer,
    LastModificationDate  integer,
    LastModifiedBy        integer,
    primary key(ID)
  );

REM ======================================================================

CREATE TABLE Branch
  (
    ID                    integer,
    Name                  varchar(500)      unique not null,
    CreationDate          integer,
    CreatedBy             integer,
    LastModificationDate  integer,
    LastModifiedBy        integer,
    primary key(ID)
  );

REM ======================================================================

CREATE TABLE BranchHash
  (
    ID                    integer,
    Hash                  varchar(700)      unique not null,
    Description           varchar(1000),
    Content               CLOB,
    CreationDate          integer,
    CreatedBy             integer,
    LastModificationDate  integer,
    LastModifiedBy        integer,
    primary key(ID)
  );

REM ======================================================================

CREATE TABLE BranchHashMap
  (
    ID                    integer,
    BranchID              integer   not null,
    BranchHashID          integer   not null,
    CreationDate          integer,
    CreatedBy             integer,
    LastModificationDate  integer,
    LastModifiedBy        integer,
    primary key(ID),
    unique(BranchID,BranchHashID)
  );

REM ======================================================================

CREATE TABLE AlgorithmConfig
  (
    ID                    integer,
    ExecutableName        integer   not null,
    ApplicationVersion    integer   not null,
    ApplicationFamily     integer   not null,
    ParameterSetID        integer   not null,
    CreatedBy             integer,
    CreationDate          integer,
    LastModificationDate  integer,
    LastModifiedBy        integer,
    primary key(ID),
    unique(ExecutableName,ApplicationVersion,ApplicationFamily,ParameterSetID)
  );

REM ======================================================================

CREATE TABLE PrimaryDatasetDescription
  (
    ID                      integer,
    TriggerDescriptionID    integer,
    MCChannelDescriptionID  integer,
    OtherDescriptionID      integer,
    CreatedBy               integer,
    CreationDate            integer,
    LastModifiedBy          integer,
    LastModificationDate    integer,
    primary key(ID),
    unique(TriggerDescriptionID,MCChannelDescriptionID,OtherDescriptionID)
  );

REM ======================================================================

CREATE TABLE PrimaryDataset
  (
    ID                    integer,
    Name                  varchar(100)      unique not null,
    Annotation            varchar(1000)     not null,
    Description           integer,
    StartDate             varchar(100),
    EndDate               varchar(100),
    Type                  integer   not null,
    CreatedBy             integer,
    CreationDate          integer,
    LastModificationDate  integer,
    LastModifiedBy        integer,
    primary key(ID)
  );

REM ======================================================================

CREATE TABLE ProcessedDataset
  (
    ID                    integer,
    Name                  varchar(500)      not null,
    PrimaryDataset        integer   not null,
    PhysicsGroup          integer   not null,
    Status                integer   not null,
    AquisitionEra         varchar(255),
    GlobalTag             varchar(255),
    CreatedBy             integer,
    CreationDate          integer,
    LastModifiedBy        integer,
    LastModificationDate  integer,
    primary key(ID),
    unique(Name,PrimaryDataset)
  );

REM ======================================================================

CREATE TABLE ProcDSRuns
  (
    ID                    integer,
    Dataset               integer   not null,
    Run                   integer   not null,
    CreationDate          integer,
    CreatedBy             integer,
    LastModificationDate  integer,
    LastModifiedBy        integer,
    primary key(ID),
    unique(Dataset,Run)
  );

REM ======================================================================

CREATE TABLE ProcDSTier
  (
    ID                    integer,
    Dataset               integer   not null,
    DataTier              integer   not null,
    CreationDate          integer,
    CreatedBy             integer,
    LastModificationDate  integer,
    LastModifiedBy        integer,
    primary key(ID),
    unique(Dataset,DataTier)
  );

REM ======================================================================

CREATE TABLE ProcDSParent
  (
    ID                    integer,
    ThisDataset           integer   not null,
    ItsParent             integer   not null,
    CreatedBy             integer,
    CreationDate          integer,
    LastModifiedBy        integer,
    LastModificationDate  integer,
    primary key(ID),
    unique(ThisDataset,ItsParent)
  );

REM ======================================================================

CREATE TABLE ProcAlgo
  (
    ID                    integer,
    Dataset               integer   not null,
    Algorithm             integer   not null,
    CreationDate          integer,
    CreatedBy             integer,
    LastModificationDate  integer,
    LastModifiedBy        integer,
    primary key(ID),
    unique(Dataset,Algorithm)
  );

REM ======================================================================

CREATE TABLE AnalysisDataset
  (
    ID                    integer,
    Name                  varchar(500)      not null,
    Version               integer            not null,
    Path                  varchar(500)      not null,
    Definition            integer   not null,
    Description           varchar(1000),
    PhysicsGroup          integer   not null,
    ProcessedDS           integer   not null,
    Type                  integer,
    Status                integer,
    CreatedBy             integer,
    CreationDate          integer,
    LastModifiedBy        integer,
    LastModificationDate  integer,
    primary key(ID),
    unique(Name,Version)
  );

REM ======================================================================

CREATE TABLE CompADSMap
  (
    ID                    integer,
    CompADS               integer   not null,
    ADS                   integer   not null,
    CreationDate          integer,
    CreatedBy             integer,
    LastModificationDate  integer,
    LastModifiedBy        integer,
    primary key(ID),
    unique(CompADS,ADS)
  );

REM ======================================================================

CREATE TABLE Block
  (
    ID                    integer,
    Name                  varchar(500)      unique not null,
    Path                  varchar(500)      not null,
    Dataset               integer   not null,
    BlockSize             integer   not null,
    NumberOfFiles         integer   not null,
    NumberOfEvents        integer   not null,
    OpenForWriting        integer               not null,
    CreatedBy             integer,
    CreationDate          integer,
    LastModifiedBy        integer,
    LastModificationDate  integer,
    primary key(ID)
  );

REM ======================================================================

CREATE TABLE Files
  (
    ID                    integer,
    LogicalFileName       varchar(500)      unique not null,
    Dataset               integer   not null,
    Block                 integer   not null,
    Checksum              varchar(100)      not null,
    NumberOfEvents        integer   not null,
    FileSize              integer   not null,
    FileStatus            integer   not null,
    FileType              integer   not null,
    FileBranch            integer,
    ValidationStatus      integer,
    QueryableMetadata     varchar(1000)     default 'NOTSET',
    CreatedBy             integer,
    CreationDate          integer,
    LastModifiedBy        integer,
    LastModificationDate  integer,
    primary key(ID)
  );

REM ======================================================================

CREATE TABLE FileTier
  (
    ID                    integer,
    Fileid                integer   not null,
    DataTier              integer   not null,
    CreationDate          integer,
    CreatedBy             integer,
    LastModificationDate  integer,
    LastModifiedBy        integer,
    primary key(ID),
    unique(Fileid,DataTier)
  );

REM ======================================================================

CREATE TABLE FileParentage
  (
    ID                    integer,
    ThisFile              integer   not null,
    ItsParent             integer   not null,
    CreatedBy             integer,
    CreationDate          integer,
    LastModifiedBy        integer,
    LastModificationDate  integer,
    primary key(ID),
    unique(ThisFile,ItsParent)
  );

REM ======================================================================

CREATE TABLE FileRunLumi
  (
    ID                    integer,
    Fileid                integer   not null,
    Lumi                  integer,
    Run                   integer   not null,
    CreationDate          integer,
    CreatedBy             integer,
    LastModificationDate  integer,
    LastModifiedBy        integer,
    primary key(ID),
    unique(Fileid,Lumi,Run)
  );

REM ======================================================================

CREATE TABLE FileAlgo
  (
    ID                    integer,
    Fileid                integer,
    Algorithm             integer   not null,
    CreationDate          integer,
    CreatedBy             integer,
    LastModificationDate  integer,
    LastModifiedBy        integer,
    primary key(ID),
    unique(Fileid,Algorithm)
  );

REM ======================================================================

CREATE TABLE FileTriggerTag
  (
    ID                    integer,
    Fileid                integer   not null,
    TriggerTag            varchar(500)      not null,
    NumberOfEvents        integer,
    CreationDate          integer,
    CreatedBy             integer,
    LastModificationDate  integer,
    LastModifiedBy        integer,
    primary key(ID),
    unique(Fileid,TriggerTag)
  );

REM ======================================================================

CREATE TABLE FileAssoc
  (
    ID                    integer,
    ThisFile              integer   not null,
    ItsAssoc              integer   not null,
    CreatedBy             integer,
    CreationDate          integer,
    LastModifiedBy        integer,
    LastModificationDate  integer,
    primary key(ID),
    unique(ThisFile,ItsAssoc)
  );

REM ======================================================================

CREATE TABLE ProcADSParent
  (
    ID                    integer,
    ThisDataset           integer   not null,
    ItsParentADS          integer   not null,
    CreatedBy             integer,
    CreationDate          integer,
    LastModifiedBy        integer,
    LastModificationDate  integer,
    primary key(ID),
    unique(ThisDataset,ItsParentADS)
  );

REM ======================================================================

CREATE TABLE AnalysisDSFileLumi
  (
    ID                    integer,
    AnalysisDataset       integer   not null,
    Lumi                  integer,
    Fileid                integer   not null,
    CreationDate          integer,
    CreatedBy             integer,
    LastModificationDate  integer,
    LastModifiedBy        integer,
    primary key(ID),
    unique(AnalysisDataset,Lumi,Fileid)
  );

REM ======================================================================

CREATE TABLE SEBlock
  (
    ID                    integer,
    SEID                  integer   not null,
    Roles                 char(1)           default 'Y',
    BlockID               integer   not null,
    CreationDate          integer,
    CreatedBy             integer,
    LastModificationDate  integer,
    LastModifiedBy        integer,
    primary key(ID),
    unique(SEID,BlockID)
  );

REM ======================================================================

ALTER TABLE Person ADD CONSTRAINT 
    Person_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE Person ADD CONSTRAINT 
    Person_LastModifiedBy_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE Role ADD CONSTRAINT 
    Role_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE Role ADD CONSTRAINT 
    Role_LastModifiedBy_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE AssignedRole ADD CONSTRAINT 
    AssignedRole_PersonID_FK foreign key(PersonID) references Person(ID)
/
ALTER TABLE AssignedRole ADD CONSTRAINT 
    AssignedRole_RoleID_FK foreign key(RoleID) references Role(ID)
/
ALTER TABLE AssignedRole ADD CONSTRAINT 
    AssignedRole_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE AssignedRole ADD CONSTRAINT 
    AssignedRole_LastModifiedBy_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE PhysicsGroup ADD CONSTRAINT 
    PhysicsGroupPhysicsGroupCon_FK foreign key(PhysicsGroupConvener) references Person(ID)
/
ALTER TABLE PhysicsGroup ADD CONSTRAINT 
    PhysicsGroup_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE PhysicsGroup ADD CONSTRAINT 
    PhysicsGroup_LastModifiedBy_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE SchemaVersion ADD CONSTRAINT 
    SchemaVersion_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE SchemaVersion ADD CONSTRAINT 
    SchemaVersionLastModifiedBy_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE Runs ADD CONSTRAINT 
    Runs_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE Runs ADD CONSTRAINT 
    Runs_LastModifiedBy_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE DataTier ADD CONSTRAINT 
    DataTier_LastModifiedBy_FK foreign key(LastModifiedBy) references Person(ID)
/
ALTER TABLE DataTier ADD CONSTRAINT 
    DataTier_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/

ALTER TABLE LumiSection ADD CONSTRAINT 
    LumiSection_RunNumber_FK foreign key(RunNumber) references Runs(ID)
/
ALTER TABLE LumiSection ADD CONSTRAINT 
    LumiSection_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE LumiSection ADD CONSTRAINT 
    LumiSection_LastModifiedBy_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE TimeLog ADD CONSTRAINT 
    TimeLog_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE TimeLog ADD CONSTRAINT 
    TimeLog_LastModifiedBy_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE DataTierOrder ADD CONSTRAINT 
    DataTierOrder_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE DataTierOrder ADD CONSTRAINT 
    DataTierOrderLastModifiedBy_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE ReasonCode ADD CONSTRAINT 
    ReasonCode_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE ReasonCode ADD CONSTRAINT 
    ReasonCode_LastModifiedBy_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE RecycleBin ADD CONSTRAINT 
    RecycleBin_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE RecycleBin ADD CONSTRAINT 
    RecycleBin_LastModifiedBy_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE AppFamily ADD CONSTRAINT 
    AppFamily_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE AppFamily ADD CONSTRAINT 
    AppFamily_LastModifiedBy_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE AppVersion ADD CONSTRAINT 
    AppVersion_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE AppVersion ADD CONSTRAINT 
    AppVersion_LastModifiedBy_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE AppExecutable ADD CONSTRAINT 
    AppExecutable_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE AppExecutable ADD CONSTRAINT 
    AppExecutableLastModifiedBy_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE QueryableParameterSet ADD CONSTRAINT 
    QueryableParameterSetCreate_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE QueryableParameterSet ADD CONSTRAINT 
    QueryableParameterSetLastMo_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE ParameterBinding ADD CONSTRAINT 
    ParameterBinding_Self_FK foreign key(Self) references QueryableParameterSet(ID)
/
ALTER TABLE ParameterBinding ADD CONSTRAINT 
    ParameterBinding_Contains_FK foreign key(Contains) references QueryableParameterSet(ID)
/
ALTER TABLE ParameterBinding ADD CONSTRAINT 
    ParameterBinding_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE ParameterBinding ADD CONSTRAINT 
    ParameterBindingLastModifie_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE TriggerPathDescription ADD CONSTRAINT 
    TriggerPathDescriptionCreat_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE TriggerPathDescription ADD CONSTRAINT 
    TriggerPathDescriptionLastM_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE MCDescription ADD CONSTRAINT 
    MCDescription_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE MCDescription ADD CONSTRAINT 
    MCDescriptionLastModifiedBy_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE OtherDescription ADD CONSTRAINT 
    OtherDescription_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE OtherDescription ADD CONSTRAINT 
    OtherDescriptionLastModifie_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE FileStatus ADD CONSTRAINT 
    FileStatus_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE FileStatus ADD CONSTRAINT 
    FileStatus_LastModifiedBy_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE FileType ADD CONSTRAINT 
    FileType_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE FileType ADD CONSTRAINT 
    FileType_LastModifiedBy_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE FileValidStatus ADD CONSTRAINT 
    FileValidStatus_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE FileValidStatus ADD CONSTRAINT 
    FileValidStatusLastModified_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE AnalysisDSType ADD CONSTRAINT 
    AnalysisDSType_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE AnalysisDSType ADD CONSTRAINT 
    AnalysisDSTypeLastModifiedB_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE AnalysisDSStatus ADD CONSTRAINT 
    AnalysisDSStatus_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE AnalysisDSStatus ADD CONSTRAINT 
    AnalysisDSStatusLastModifie_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE AnalysisDSDef ADD CONSTRAINT 
    AnalysisDSDef_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE AnalysisDSDef ADD CONSTRAINT 
    AnalysisDSDefLastModifiedBy_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE CompositeADS ADD CONSTRAINT 
    CompositeADS_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE CompositeADS ADD CONSTRAINT 
    CompositeADS_LastModifiedBy_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE StorageElement ADD CONSTRAINT 
    StorageElement_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE StorageElement ADD CONSTRAINT 
    StorageElementLastModifiedB_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE ProcDSStatus ADD CONSTRAINT 
    ProcDSStatus_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE ProcDSStatus ADD CONSTRAINT 
    ProcDSStatus_LastModifiedBy_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE PrimaryDSType ADD CONSTRAINT 
    PrimaryDSType_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE PrimaryDSType ADD CONSTRAINT 
    PrimaryDSTypeLastModifiedBy_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE QualityValues ADD CONSTRAINT 
    QualityValues_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE QualityValues ADD CONSTRAINT 
    QualityValuesLastModifiedBy_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE SubSystem ADD CONSTRAINT 
    SubSystem_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE SubSystem ADD CONSTRAINT 
    SubSystem_LastModifiedBy_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE RunLumiQuality ADD CONSTRAINT 
    RunLumiQuality_Run_FK foreign key(Run) references Runs(ID)
/
ALTER TABLE RunLumiQuality ADD CONSTRAINT 
    RunLumiQuality_Lumi_FK foreign key(Lumi) references LumiSection(ID)
/
ALTER TABLE RunLumiQuality ADD CONSTRAINT 
    RunLumiQuality_SubSystem_FK foreign key(SubSystem) references SubSystem(ID) on delete CASCADE
/
ALTER TABLE RunLumiQuality ADD CONSTRAINT 
    RunLumiQuality_DQValue_FK foreign key(DQValue) references QualityValues(ID) on delete CASCADE
/
ALTER TABLE RunLumiQuality ADD CONSTRAINT 
    RunLumiQuality_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE RunLumiQuality ADD CONSTRAINT 
    RunLumiQualityLastModifiedB_FK foreign key(LastModifiedBy) references Person(ID)
/


ALTER TABLE RunLumiDQInt ADD CONSTRAINT
    RunLumiDQInt_Run_FK foreign key(Run) references Runs(ID)
/
ALTER TABLE RunLumiDQInt ADD CONSTRAINT
    RunLumiDQInt_Lumi_FK foreign key(Lumi) references LumiSection(ID)
/
ALTER TABLE RunLumiDQInt ADD CONSTRAINT
    RunLumiDQInt_SubSystem_FK foreign key(SubSystem) references SubSystem(ID) on delete CASCADE
/
ALTER TABLE RunLumiDQInt ADD CONSTRAINT
    RunLumiDQInt_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE RunLumiDQInt ADD CONSTRAINT
    RunLumiDQIntLastModifiedB_FK foreign key(LastModifiedBy) references Person(ID)
/


ALTER TABLE QualityHistory ADD CONSTRAINT 
    QualityHistory_HistoryOf_FK foreign key(HistoryOf) references RunLumiQuality(ID)
/
ALTER TABLE QualityHistory ADD CONSTRAINT 
    QualityHistory_Run_FK foreign key(Run) references Runs(ID)
/
ALTER TABLE QualityHistory ADD CONSTRAINT 
    QualityHistory_Lumi_FK foreign key(Lumi) references LumiSection(ID)
/
ALTER TABLE QualityHistory ADD CONSTRAINT 
    QualityHistory_SubSystem_FK foreign key(SubSystem) references SubSystem(ID) on delete CASCADE
/
ALTER TABLE QualityHistory ADD CONSTRAINT 
    QualityHistory_DQValue_FK foreign key(DQValue) references QualityValues(ID) on delete CASCADE
/
ALTER TABLE QualityHistory ADD CONSTRAINT 
    QualityHistory_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE QualityHistory ADD CONSTRAINT 
    QualityHistoryLastModifiedB_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE QualityVersion ADD CONSTRAINT 
    QualityVersion_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE QualityVersion ADD CONSTRAINT 
    QualityVersionLastModifiedB_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE Branch ADD CONSTRAINT 
    Branch_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE Branch ADD CONSTRAINT 
    Branch_LastModifiedBy_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE BranchHash ADD CONSTRAINT 
    BranchHash_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE BranchHash ADD CONSTRAINT 
    BranchHash_LastModifiedBy_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE BranchHashMap ADD CONSTRAINT 
    BranchHashMap_BranchID_FK foreign key(BranchID) references Branch(ID) on delete CASCADE
/
ALTER TABLE BranchHashMap ADD CONSTRAINT 
    BranchHashMap_BranchHashID_FK foreign key(BranchHashID) references BranchHash(ID)
/
ALTER TABLE BranchHashMap ADD CONSTRAINT 
    BranchHashMap_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE BranchHashMap ADD CONSTRAINT 
    BranchHashMapLastModifiedBy_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE AlgorithmConfig ADD CONSTRAINT 
    AlgorithmConfigExecutableNa_FK foreign key(ExecutableName) references AppExecutable(ID)
/
ALTER TABLE AlgorithmConfig ADD CONSTRAINT 
    AlgorithmConfigApplicationV_FK foreign key(ApplicationVersion) references AppVersion(ID)
/
ALTER TABLE AlgorithmConfig ADD CONSTRAINT 
    AlgorithmConfigApplicationF_FK foreign key(ApplicationFamily) references AppFamily(ID)
/
ALTER TABLE AlgorithmConfig ADD CONSTRAINT 
    AlgorithmConfigParameterSet_FK foreign key(ParameterSetID) references QueryableParameterSet(ID)
/
ALTER TABLE AlgorithmConfig ADD CONSTRAINT 
    AlgorithmConfig_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE AlgorithmConfig ADD CONSTRAINT 
    AlgorithmConfigLastModified_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE PrimaryDatasetDescription ADD CONSTRAINT 
    PrimaryDatasetDescriptionTr_FK foreign key(TriggerDescriptionID) references TriggerPathDescription(ID)
/
ALTER TABLE PrimaryDatasetDescription ADD CONSTRAINT 
    PrimaryDatasetDescriptionMC_FK foreign key(MCChannelDescriptionID) references MCDescription(ID)
/
ALTER TABLE PrimaryDatasetDescription ADD CONSTRAINT 
    PrimaryDatasetDescriptionOt_FK foreign key(OtherDescriptionID) references OtherDescription(ID)
/
ALTER TABLE PrimaryDatasetDescription ADD CONSTRAINT 
    PrimaryDatasetDescriptionCr_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE PrimaryDatasetDescription ADD CONSTRAINT 
    PrimaryDatasetDescriptionLa_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE PrimaryDataset ADD CONSTRAINT 
    PrimaryDataset_Description_FK foreign key(Description) references PrimaryDatasetDescription(ID)
/
ALTER TABLE PrimaryDataset ADD CONSTRAINT 
    PrimaryDataset_Type_FK foreign key(Type) references PrimaryDSType(ID)
/
ALTER TABLE PrimaryDataset ADD CONSTRAINT 
    PrimaryDataset_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE PrimaryDataset ADD CONSTRAINT 
    PrimaryDatasetLastModifiedB_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE ProcessedDataset ADD CONSTRAINT 
    ProcessedDatasetPrimaryData_FK foreign key(PrimaryDataset) references PrimaryDataset(ID) on delete CASCADE
/
ALTER TABLE ProcessedDataset ADD CONSTRAINT 
    ProcessedDatasetPhysicsGrou_FK foreign key(PhysicsGroup) references PhysicsGroup(ID)
/
ALTER TABLE ProcessedDataset ADD CONSTRAINT 
    ProcessedDataset_Status_FK foreign key(Status) references ProcDSStatus(ID)
/
ALTER TABLE ProcessedDataset ADD CONSTRAINT 
    ProcessedDataset_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE ProcessedDataset ADD CONSTRAINT 
    ProcessedDatasetLastModifie_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE ProcDSRuns ADD CONSTRAINT 
    ProcDSRuns_Dataset_FK foreign key(Dataset) references ProcessedDataset(ID) on delete CASCADE
/
ALTER TABLE ProcDSRuns ADD CONSTRAINT 
    ProcDSRuns_Run_FK foreign key(Run) references Runs(ID)
/
ALTER TABLE ProcDSRuns ADD CONSTRAINT 
    ProcDSRuns_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE ProcDSRuns ADD CONSTRAINT 
    ProcDSRuns_LastModifiedBy_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE ProcDSTier ADD CONSTRAINT 
    ProcDSTier_Dataset_FK foreign key(Dataset) references ProcessedDataset(ID) on delete CASCADE
/
ALTER TABLE ProcDSTier ADD CONSTRAINT 
    ProcDSTier_DataTier_FK foreign key(DataTier) references DataTier(ID)
/
ALTER TABLE ProcDSTier ADD CONSTRAINT 
    ProcDSTier_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE ProcDSTier ADD CONSTRAINT 
    ProcDSTier_LastModifiedBy_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE ProcDSParent ADD CONSTRAINT 
    ProcDSParent_ThisDataset_FK foreign key(ThisDataset) references ProcessedDataset(ID) on delete CASCADE
/
ALTER TABLE ProcDSParent ADD CONSTRAINT 
    ProcDSParent_ItsParent_FK foreign key(ItsParent) references ProcessedDataset(ID) on delete CASCADE
/
ALTER TABLE ProcDSParent ADD CONSTRAINT 
    ProcDSParent_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE ProcDSParent ADD CONSTRAINT 
    ProcDSParent_LastModifiedBy_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE ProcAlgo ADD CONSTRAINT 
    ProcAlgo_Dataset_FK foreign key(Dataset) references ProcessedDataset(ID) on delete CASCADE
/
ALTER TABLE ProcAlgo ADD CONSTRAINT 
    ProcAlgo_Algorithm_FK foreign key(Algorithm) references AlgorithmConfig(ID) on delete CASCADE
/
ALTER TABLE ProcAlgo ADD CONSTRAINT 
    ProcAlgo_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE ProcAlgo ADD CONSTRAINT 
    ProcAlgo_LastModifiedBy_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE AnalysisDataset ADD CONSTRAINT 
    AnalysisDataset_Definition_FK foreign key(Definition) references AnalysisDSDef(ID)
/
ALTER TABLE AnalysisDataset ADD CONSTRAINT 
    AnalysisDatasetPhysicsGroup_FK foreign key(PhysicsGroup) references PhysicsGroup(ID)
/
ALTER TABLE AnalysisDataset ADD CONSTRAINT 
    AnalysisDataset_ProcessedDS_FK foreign key(ProcessedDS) references ProcessedDataset(ID) on delete CASCADE
/
ALTER TABLE AnalysisDataset ADD CONSTRAINT 
    AnalysisDataset_Type_FK foreign key(Type) references AnalysisDSType(ID)
/
ALTER TABLE AnalysisDataset ADD CONSTRAINT 
    AnalysisDataset_Status_FK foreign key(Status) references AnalysisDSStatus(ID)
/
ALTER TABLE AnalysisDataset ADD CONSTRAINT 
    AnalysisDataset_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE AnalysisDataset ADD CONSTRAINT 
    AnalysisDatasetLastModified_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE CompADSMap ADD CONSTRAINT 
    CompADSMap_CompADS_FK foreign key(CompADS) references CompositeADS(ID)
/
ALTER TABLE CompADSMap ADD CONSTRAINT 
    CompADSMap_ADS_FK foreign key(ADS) references AnalysisDataset(ID) on delete CASCADE
/
ALTER TABLE CompADSMap ADD CONSTRAINT 
    CompADSMap_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE CompADSMap ADD CONSTRAINT 
    CompADSMap_LastModifiedBy_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE Block ADD CONSTRAINT 
    Block_Dataset_FK foreign key(Dataset) references ProcessedDataset(ID) on delete CASCADE
/
ALTER TABLE Block ADD CONSTRAINT 
    Block_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE Block ADD CONSTRAINT 
    Block_LastModifiedBy_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE Files ADD CONSTRAINT 
    Files_Dataset_FK foreign key(Dataset) references ProcessedDataset(ID) on delete CASCADE
/
ALTER TABLE Files ADD CONSTRAINT 
    Files_Block_FK foreign key(Block) references Block(ID) on delete CASCADE
/
ALTER TABLE Files ADD CONSTRAINT 
    Files_FileStatus_FK foreign key(FileStatus) references FileStatus(ID)
/
ALTER TABLE Files ADD CONSTRAINT 
    Files_FileType_FK foreign key(FileType) references FileType(ID)
/
ALTER TABLE Files ADD CONSTRAINT 
    Files_FileBranch_FK foreign key(FileBranch) references BranchHash(ID)
/
ALTER TABLE Files ADD CONSTRAINT 
    Files_ValidationStatus_FK foreign key(ValidationStatus) references FileValidStatus(ID)
/
ALTER TABLE Files ADD CONSTRAINT 
    Files_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE Files ADD CONSTRAINT 
    Files_LastModifiedBy_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE FileTier ADD CONSTRAINT 
    FileTier_Fileid_FK foreign key(Fileid) references Files(ID) on delete CASCADE
/
ALTER TABLE FileTier ADD CONSTRAINT 
    FileTier_DataTier_FK foreign key(DataTier) references DataTier(ID)
/
ALTER TABLE FileTier ADD CONSTRAINT 
    FileTier_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE FileTier ADD CONSTRAINT 
    FileTier_LastModifiedBy_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE FileParentage ADD CONSTRAINT 
    FileParentage_ThisFile_FK foreign key(ThisFile) references Files(ID) on delete CASCADE
/
ALTER TABLE FileParentage ADD CONSTRAINT 
    FileParentage_ItsParent_FK foreign key(ItsParent) references Files(ID) on delete CASCADE
/
ALTER TABLE FileParentage ADD CONSTRAINT 
    FileParentage_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE FileParentage ADD CONSTRAINT 
    FileParentageLastModifiedBy_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE FileRunLumi ADD CONSTRAINT 
    FileRunLumi_Fileid_FK foreign key(Fileid) references Files(ID) on delete CASCADE
/
ALTER TABLE FileRunLumi ADD CONSTRAINT 
    FileRunLumi_Lumi_FK foreign key(Lumi) references LumiSection(ID)
/
ALTER TABLE FileRunLumi ADD CONSTRAINT 
    FileRunLumi_Run_FK foreign key(Run) references Runs(ID)
/
ALTER TABLE FileRunLumi ADD CONSTRAINT 
    FileRunLumi_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE FileRunLumi ADD CONSTRAINT 
    FileRunLumi_LastModifiedBy_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE FileAlgo ADD CONSTRAINT 
    FileAlgo_Fileid_FK foreign key(Fileid) references Files(ID) on delete CASCADE
/
ALTER TABLE FileAlgo ADD CONSTRAINT 
    FileAlgo_Algorithm_FK foreign key(Algorithm) references AlgorithmConfig(ID)
/
ALTER TABLE FileAlgo ADD CONSTRAINT 
    FileAlgo_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE FileAlgo ADD CONSTRAINT 
    FileAlgo_LastModifiedBy_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE FileTriggerTag ADD CONSTRAINT 
    FileTriggerTag_Fileid_FK foreign key(Fileid) references Files(ID) on delete CASCADE
/
ALTER TABLE FileTriggerTag ADD CONSTRAINT 
    FileTriggerTag_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE FileTriggerTag ADD CONSTRAINT 
    FileTriggerTagLastModifiedB_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE FileAssoc ADD CONSTRAINT 
    FileAssoc_ThisFile_FK foreign key(ThisFile) references Files(ID) on delete CASCADE
/
ALTER TABLE FileAssoc ADD CONSTRAINT 
    FileAssoc_ItsAssoc_FK foreign key(ItsAssoc) references Files(ID) on delete CASCADE
/
ALTER TABLE FileAssoc ADD CONSTRAINT 
    FileAssoc_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE FileAssoc ADD CONSTRAINT 
    FileAssoc_LastModifiedBy_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE ProcADSParent ADD CONSTRAINT 
    ProcADSParent_ThisDataset_FK foreign key(ThisDataset) references ProcessedDataset(ID) on delete CASCADE
/
ALTER TABLE ProcADSParent ADD CONSTRAINT 
    ProcADSParent_ItsParentADS_FK foreign key(ItsParentADS) references AnalysisDataset(ID) on delete CASCADE
/
ALTER TABLE ProcADSParent ADD CONSTRAINT 
    ProcADSParent_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE ProcADSParent ADD CONSTRAINT 
    ProcADSParentLastModifiedBy_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE AnalysisDSFileLumi ADD CONSTRAINT 
    AnalysisDSFileLumiAnalysisD_FK foreign key(AnalysisDataset) references AnalysisDataset(ID) on delete CASCADE
/
ALTER TABLE AnalysisDSFileLumi ADD CONSTRAINT 
    AnalysisDSFileLumi_Lumi_FK foreign key(Lumi) references LumiSection(ID)
/
ALTER TABLE AnalysisDSFileLumi ADD CONSTRAINT 
    AnalysisDSFileLumi_Fileid_FK foreign key(Fileid) references Files(ID)
/
ALTER TABLE AnalysisDSFileLumi ADD CONSTRAINT 
    AnalysisDSFileLumiCreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE AnalysisDSFileLumi ADD CONSTRAINT 
    AnalysisDSFileLumiLastModif_FK foreign key(LastModifiedBy) references Person(ID)
/

ALTER TABLE SEBlock ADD CONSTRAINT 
    SEBlock_SEID_FK foreign key(SEID) references StorageElement(ID) on delete CASCADE
/
ALTER TABLE SEBlock ADD CONSTRAINT 
    SEBlock_BlockID_FK foreign key(BlockID) references Block(ID) on delete CASCADE
/
ALTER TABLE SEBlock ADD CONSTRAINT 
    SEBlock_CreatedBy_FK foreign key(CreatedBy) references Person(ID)
/
ALTER TABLE SEBlock ADD CONSTRAINT 
    SEBlock_LastModifiedBy_FK foreign key(LastModifiedBy) references Person(ID)
/

-- === generated index statements ==============
PROMPT Creating indexes
-- ====================================================

-- ============== SEQUENCES ===========================
PROMPT Creating sequences
PROMPT creating sequence seq_person ;
create sequence seq_person ;
PROMPT creating sequence seq_role ;
create sequence seq_role ;
PROMPT creating sequence seq_assignedrole ;
create sequence seq_assignedrole ;
PROMPT creating sequence seq_physicsgroup ;
create sequence seq_physicsgroup ;
PROMPT creating sequence seq_schemaversion ;
create sequence seq_schemaversion ;
PROMPT creating sequence seq_runs ;
create sequence seq_runs ;
PROMPT creating sequence seq_datatier ;
create sequence seq_datatier ;
PROMPT creating sequence seq_lumisection ;
create sequence seq_lumisection ;
PROMPT creating sequence seq_timelog ;
create sequence seq_timelog ;
PROMPT creating sequence seq_datatierorder ;
create sequence seq_datatierorder ;
PROMPT creating sequence seq_reasoncode ;
create sequence seq_reasoncode ;
PROMPT creating sequence seq_recyclebin ;
create sequence seq_recyclebin ;
PROMPT creating sequence seq_appfamily ;
create sequence seq_appfamily ;
PROMPT creating sequence seq_appversion ;
create sequence seq_appversion ;
PROMPT creating sequence seq_appexecutable ;
create sequence seq_appexecutable ;
PROMPT creating sequence seq_queryableparameterset ;
create sequence seq_queryableparameterset ;
PROMPT creating sequence seq_parameterbinding ;
create sequence seq_parameterbinding ;
PROMPT creating sequence seq_triggerpathdescription ;
create sequence seq_triggerpathdescription ;
PROMPT creating sequence seq_mcdescription ;
create sequence seq_mcdescription ;
PROMPT creating sequence seq_otherdescription ;
create sequence seq_otherdescription ;
PROMPT creating sequence seq_filestatus ;
create sequence seq_filestatus ;
PROMPT creating sequence seq_filetype ;
create sequence seq_filetype ;
PROMPT creating sequence seq_filevalidstatus ;
create sequence seq_filevalidstatus ;
PROMPT creating sequence seq_analysisdstype ;
create sequence seq_analysisdstype ;
PROMPT creating sequence seq_analysisdsstatus ;
create sequence seq_analysisdsstatus ;
PROMPT creating sequence seq_analysisdsdef ;
create sequence seq_analysisdsdef ;
PROMPT creating sequence seq_compositeads ;
create sequence seq_compositeads ;
PROMPT creating sequence seq_storageelement ;
create sequence seq_storageelement ;
PROMPT creating sequence seq_procdsstatus ;
create sequence seq_procdsstatus ;
PROMPT creating sequence seq_primarydstype ;
create sequence seq_primarydstype ;
PROMPT creating sequence seq_qualityvalues ;
create sequence seq_qualityvalues ;
PROMPT creating sequence seq_subsystem ;
create sequence seq_subsystem ;
PROMPT creating sequence seq_runlumiquality ;
create sequence seq_runlumiquality ;
PROMPT creating sequence seq_runlumidqint ;
create sequence seq_runlumidqint ;
PROMPT creating sequence seq_qualityhistory ;
create sequence seq_qualityhistory ;
PROMPT creating sequence seq_qualityversion ;
create sequence seq_qualityversion ;
PROMPT creating sequence seq_branch ;
create sequence seq_branch ;
PROMPT creating sequence seq_branchhash ;
create sequence seq_branchhash ;
PROMPT creating sequence seq_branchhashmap ;
create sequence seq_branchhashmap ;
PROMPT creating sequence seq_algorithmconfig ;
create sequence seq_algorithmconfig ;
PROMPT creating sequence seq_primarydatasetdescription ;
create sequence seq_primarydatasetdescription ;
PROMPT creating sequence seq_primarydataset ;
create sequence seq_primarydataset ;
PROMPT creating sequence seq_processeddataset ;
create sequence seq_processeddataset ;
PROMPT creating sequence seq_procdsruns ;
create sequence seq_procdsruns ;
PROMPT creating sequence seq_procdstier ;
create sequence seq_procdstier ;
PROMPT creating sequence seq_procdsparent ;
create sequence seq_procdsparent ;
PROMPT creating sequence seq_procalgo ;
create sequence seq_procalgo ;
PROMPT creating sequence seq_analysisdataset ;
create sequence seq_analysisdataset ;
PROMPT creating sequence seq_compadsmap ;
create sequence seq_compadsmap ;
PROMPT creating sequence seq_block ;
create sequence seq_block ;
PROMPT creating sequence seq_files ;
create sequence seq_files ;
PROMPT creating sequence seq_filetier ;
create sequence seq_filetier ;
PROMPT creating sequence seq_fileparentage ;
create sequence seq_fileparentage ;
PROMPT creating sequence seq_filerunlumi ;
create sequence seq_filerunlumi ;
PROMPT creating sequence seq_filealgo ;
create sequence seq_filealgo ;
PROMPT creating sequence seq_filetriggertag ;
create sequence seq_filetriggertag ;
PROMPT creating sequence seq_fileassoc ;
create sequence seq_fileassoc ;
PROMPT creating sequence seq_procadsparent ;
create sequence seq_procadsparent ;
PROMPT creating sequence seq_analysisdsfilelumi ;
create sequence seq_analysisdsfilelumi ;
PROMPT creating sequence seq_seblock ;
create sequence seq_seblock ;
-- ============= AUTO INC Table.ID TRIGGERS ===========
PROMPT Creating auto inc triggers

-- ====================================================
-- AUTO INC TRIGGER FOR person.ID using SEQ seq_person

PROMPT AUTO INC TRIGGER FOR Trigger for Table: person
 CREATE OR REPLACE TRIGGER person_TRIG before insert on person    for each row begin     if inserting then       if :NEW.ID is null then          select seq_person.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR role.ID using SEQ seq_role

PROMPT AUTO INC TRIGGER FOR Trigger for Table: role
 CREATE OR REPLACE TRIGGER role_TRIG before insert on role    for each row begin     if inserting then       if :NEW.ID is null then          select seq_role.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR assignedrole.ID using SEQ seq_assignedrole

PROMPT AUTO INC TRIGGER FOR Trigger for Table: assignedrole
 CREATE OR REPLACE TRIGGER assignedrole_TRIG before insert on assignedrole    for each row begin     if inserting then       if :NEW.ID is null then          select seq_assignedrole.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR physicsgroup.ID using SEQ seq_physicsgroup

PROMPT AUTO INC TRIGGER FOR Trigger for Table: physicsgroup
 CREATE OR REPLACE TRIGGER physicsgroup_TRIG before insert on physicsgroup    for each row begin     if inserting then       if :NEW.ID is null then          select seq_physicsgroup.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR schemaversion.ID using SEQ seq_schemaversion

PROMPT AUTO INC TRIGGER FOR Trigger for Table: schemaversion
 CREATE OR REPLACE TRIGGER schemaversion_TRIG before insert on schemaversion    for each row begin     if inserting then       if :NEW.ID is null then          select seq_schemaversion.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR runs.ID using SEQ seq_runs

PROMPT AUTO INC TRIGGER FOR Trigger for Table: runs
 CREATE OR REPLACE TRIGGER runs_TRIG before insert on runs    for each row begin     if inserting then       if :NEW.ID is null then          select seq_runs.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR datatier.ID using SEQ seq_datatier

PROMPT AUTO INC TRIGGER FOR Trigger for Table: datatier
 CREATE OR REPLACE TRIGGER datatier_TRIG before insert on datatier    for each row begin     if inserting then       if :NEW.ID is null then          select seq_datatier.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR lumisection.ID using SEQ seq_lumisection

PROMPT AUTO INC TRIGGER FOR Trigger for Table: lumisection
 CREATE OR REPLACE TRIGGER lumisection_TRIG before insert on lumisection    for each row begin     if inserting then       if :NEW.ID is null then          select seq_lumisection.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR timelog.ID using SEQ seq_timelog

PROMPT AUTO INC TRIGGER FOR Trigger for Table: timelog
 CREATE OR REPLACE TRIGGER timelog_TRIG before insert on timelog    for each row begin     if inserting then       if :NEW.ID is null then          select seq_timelog.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR datatierorder.ID using SEQ seq_datatierorder

PROMPT AUTO INC TRIGGER FOR Trigger for Table: datatierorder
 CREATE OR REPLACE TRIGGER datatierorder_TRIG before insert on datatierorder    for each row begin     if inserting then       if :NEW.ID is null then          select seq_datatierorder.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR reasoncode.ID using SEQ seq_reasoncode

PROMPT AUTO INC TRIGGER FOR Trigger for Table: reasoncode
 CREATE OR REPLACE TRIGGER reasoncode_TRIG before insert on reasoncode    for each row begin     if inserting then       if :NEW.ID is null then          select seq_reasoncode.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR recyclebin.ID using SEQ seq_recyclebin

PROMPT AUTO INC TRIGGER FOR Trigger for Table: recyclebin
 CREATE OR REPLACE TRIGGER recyclebin_TRIG before insert on recyclebin    for each row begin     if inserting then       if :NEW.ID is null then          select seq_recyclebin.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR appfamily.ID using SEQ seq_appfamily

PROMPT AUTO INC TRIGGER FOR Trigger for Table: appfamily
 CREATE OR REPLACE TRIGGER appfamily_TRIG before insert on appfamily    for each row begin     if inserting then       if :NEW.ID is null then          select seq_appfamily.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR appversion.ID using SEQ seq_appversion

PROMPT AUTO INC TRIGGER FOR Trigger for Table: appversion
 CREATE OR REPLACE TRIGGER appversion_TRIG before insert on appversion    for each row begin     if inserting then       if :NEW.ID is null then          select seq_appversion.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR appexecutable.ID using SEQ seq_appexecutable

PROMPT AUTO INC TRIGGER FOR Trigger for Table: appexecutable
 CREATE OR REPLACE TRIGGER appexecutable_TRIG before insert on appexecutable    for each row begin     if inserting then       if :NEW.ID is null then          select seq_appexecutable.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR queryableparameterset.ID using SEQ seq_queryableparameterset

PROMPT AUTO INC TRIGGER FOR Trigger for Table: queryableparameterset
 CREATE OR REPLACE TRIGGER queryableparameterset_TRIG before insert on queryableparameterset    for each row begin     if inserting then       if :NEW.ID is null then          select seq_queryableparameterset.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR parameterbinding.ID using SEQ seq_parameterbinding

PROMPT AUTO INC TRIGGER FOR Trigger for Table: parameterbinding
 CREATE OR REPLACE TRIGGER parameterbinding_TRIG before insert on parameterbinding    for each row begin     if inserting then       if :NEW.ID is null then          select seq_parameterbinding.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR triggerpathdescription.ID using SEQ seq_triggerpathdescription

PROMPT AUTO INC TRIGGER FOR Trigger for Table: triggerpathdescription
 CREATE OR REPLACE TRIGGER triggerpathdescription_TRIG before insert on triggerpathdescription    for each row begin     if inserting then       if :NEW.ID is null then          select seq_triggerpathdescription.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR mcdescription.ID using SEQ seq_mcdescription

PROMPT AUTO INC TRIGGER FOR Trigger for Table: mcdescription
 CREATE OR REPLACE TRIGGER mcdescription_TRIG before insert on mcdescription    for each row begin     if inserting then       if :NEW.ID is null then          select seq_mcdescription.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR otherdescription.ID using SEQ seq_otherdescription

PROMPT AUTO INC TRIGGER FOR Trigger for Table: otherdescription
 CREATE OR REPLACE TRIGGER otherdescription_TRIG before insert on otherdescription    for each row begin     if inserting then       if :NEW.ID is null then          select seq_otherdescription.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR filestatus.ID using SEQ seq_filestatus

PROMPT AUTO INC TRIGGER FOR Trigger for Table: filestatus
 CREATE OR REPLACE TRIGGER filestatus_TRIG before insert on filestatus    for each row begin     if inserting then       if :NEW.ID is null then          select seq_filestatus.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR filetype.ID using SEQ seq_filetype

PROMPT AUTO INC TRIGGER FOR Trigger for Table: filetype
 CREATE OR REPLACE TRIGGER filetype_TRIG before insert on filetype    for each row begin     if inserting then       if :NEW.ID is null then          select seq_filetype.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR filevalidstatus.ID using SEQ seq_filevalidstatus

PROMPT AUTO INC TRIGGER FOR Trigger for Table: filevalidstatus
 CREATE OR REPLACE TRIGGER filevalidstatus_TRIG before insert on filevalidstatus    for each row begin     if inserting then       if :NEW.ID is null then          select seq_filevalidstatus.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR analysisdstype.ID using SEQ seq_analysisdstype

PROMPT AUTO INC TRIGGER FOR Trigger for Table: analysisdstype
 CREATE OR REPLACE TRIGGER analysisdstype_TRIG before insert on analysisdstype    for each row begin     if inserting then       if :NEW.ID is null then          select seq_analysisdstype.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR analysisdsstatus.ID using SEQ seq_analysisdsstatus

PROMPT AUTO INC TRIGGER FOR Trigger for Table: analysisdsstatus
 CREATE OR REPLACE TRIGGER analysisdsstatus_TRIG before insert on analysisdsstatus    for each row begin     if inserting then       if :NEW.ID is null then          select seq_analysisdsstatus.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR analysisdsdef.ID using SEQ seq_analysisdsdef

PROMPT AUTO INC TRIGGER FOR Trigger for Table: analysisdsdef
 CREATE OR REPLACE TRIGGER analysisdsdef_TRIG before insert on analysisdsdef    for each row begin     if inserting then       if :NEW.ID is null then          select seq_analysisdsdef.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR compositeads.ID using SEQ seq_compositeads

PROMPT AUTO INC TRIGGER FOR Trigger for Table: compositeads
 CREATE OR REPLACE TRIGGER compositeads_TRIG before insert on compositeads    for each row begin     if inserting then       if :NEW.ID is null then          select seq_compositeads.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR storageelement.ID using SEQ seq_storageelement

PROMPT AUTO INC TRIGGER FOR Trigger for Table: storageelement
 CREATE OR REPLACE TRIGGER storageelement_TRIG before insert on storageelement    for each row begin     if inserting then       if :NEW.ID is null then          select seq_storageelement.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR procdsstatus.ID using SEQ seq_procdsstatus

PROMPT AUTO INC TRIGGER FOR Trigger for Table: procdsstatus
 CREATE OR REPLACE TRIGGER procdsstatus_TRIG before insert on procdsstatus    for each row begin     if inserting then       if :NEW.ID is null then          select seq_procdsstatus.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR primarydstype.ID using SEQ seq_primarydstype

PROMPT AUTO INC TRIGGER FOR Trigger for Table: primarydstype
 CREATE OR REPLACE TRIGGER primarydstype_TRIG before insert on primarydstype    for each row begin     if inserting then       if :NEW.ID is null then          select seq_primarydstype.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR qualityvalues.ID using SEQ seq_qualityvalues

PROMPT AUTO INC TRIGGER FOR Trigger for Table: qualityvalues
 CREATE OR REPLACE TRIGGER qualityvalues_TRIG before insert on qualityvalues    for each row begin     if inserting then       if :NEW.ID is null then          select seq_qualityvalues.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR subsystem.ID using SEQ seq_subsystem

PROMPT AUTO INC TRIGGER FOR Trigger for Table: subsystem
 CREATE OR REPLACE TRIGGER subsystem_TRIG before insert on subsystem    for each row begin     if inserting then       if :NEW.ID is null then          select seq_subsystem.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR runlumiquality.ID using SEQ seq_runlumiquality

PROMPT AUTO INC TRIGGER FOR Trigger for Table: runlumiquality
 CREATE OR REPLACE TRIGGER runlumiquality_TRIG before insert on runlumiquality    for each row begin     if inserting then       if :NEW.ID is null then          select seq_runlumiquality.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR runlumidqint.ID using SEQ seq_runlumidqint

PROMPT AUTO INC TRIGGER FOR Trigger for Table: runlumidqint
 CREATE OR REPLACE TRIGGER runlumidqint_TRIG before insert on runlumidqint    for each row begin     if inserting then       if :NEW.ID is null then          select seq_runlumidqint.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR qualityhistory.ID using SEQ seq_qualityhistory

PROMPT AUTO INC TRIGGER FOR Trigger for Table: qualityhistory
 CREATE OR REPLACE TRIGGER qualityhistory_TRIG before insert on qualityhistory    for each row begin     if inserting then       if :NEW.ID is null then          select seq_qualityhistory.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR qualityversion.ID using SEQ seq_qualityversion

PROMPT AUTO INC TRIGGER FOR Trigger for Table: qualityversion
 CREATE OR REPLACE TRIGGER qualityversion_TRIG before insert on qualityversion    for each row begin     if inserting then       if :NEW.ID is null then          select seq_qualityversion.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR branch.ID using SEQ seq_branch

PROMPT AUTO INC TRIGGER FOR Trigger for Table: branch
 CREATE OR REPLACE TRIGGER branch_TRIG before insert on branch    for each row begin     if inserting then       if :NEW.ID is null then          select seq_branch.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR branchhash.ID using SEQ seq_branchhash

PROMPT AUTO INC TRIGGER FOR Trigger for Table: branchhash
 CREATE OR REPLACE TRIGGER branchhash_TRIG before insert on branchhash    for each row begin     if inserting then       if :NEW.ID is null then          select seq_branchhash.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR branchhashmap.ID using SEQ seq_branchhashmap

PROMPT AUTO INC TRIGGER FOR Trigger for Table: branchhashmap
 CREATE OR REPLACE TRIGGER branchhashmap_TRIG before insert on branchhashmap    for each row begin     if inserting then       if :NEW.ID is null then          select seq_branchhashmap.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR algorithmconfig.ID using SEQ seq_algorithmconfig

PROMPT AUTO INC TRIGGER FOR Trigger for Table: algorithmconfig
 CREATE OR REPLACE TRIGGER algorithmconfig_TRIG before insert on algorithmconfig    for each row begin     if inserting then       if :NEW.ID is null then          select seq_algorithmconfig.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR primarydatasetdescription.ID using SEQ seq_primarydatasetdescription

PROMPT AUTO INC TRIGGER FOR Trigger for Table: primarydatasetdescription
 CREATE OR REPLACE TRIGGER primarydatasetdescription_TRIG before insert on primarydatasetdescription    for each row begin     if inserting then       if :NEW.ID is null then          select seq_primarydatasetdescription.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR primarydataset.ID using SEQ seq_primarydataset

PROMPT AUTO INC TRIGGER FOR Trigger for Table: primarydataset
 CREATE OR REPLACE TRIGGER primarydataset_TRIG before insert on primarydataset    for each row begin     if inserting then       if :NEW.ID is null then          select seq_primarydataset.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR processeddataset.ID using SEQ seq_processeddataset

PROMPT AUTO INC TRIGGER FOR Trigger for Table: processeddataset
 CREATE OR REPLACE TRIGGER processeddataset_TRIG before insert on processeddataset    for each row begin     if inserting then       if :NEW.ID is null then          select seq_processeddataset.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR procdsruns.ID using SEQ seq_procdsruns

PROMPT AUTO INC TRIGGER FOR Trigger for Table: procdsruns
 CREATE OR REPLACE TRIGGER procdsruns_TRIG before insert on procdsruns    for each row begin     if inserting then       if :NEW.ID is null then          select seq_procdsruns.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR procdstier.ID using SEQ seq_procdstier

PROMPT AUTO INC TRIGGER FOR Trigger for Table: procdstier
 CREATE OR REPLACE TRIGGER procdstier_TRIG before insert on procdstier    for each row begin     if inserting then       if :NEW.ID is null then          select seq_procdstier.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR procdsparent.ID using SEQ seq_procdsparent

PROMPT AUTO INC TRIGGER FOR Trigger for Table: procdsparent
 CREATE OR REPLACE TRIGGER procdsparent_TRIG before insert on procdsparent    for each row begin     if inserting then       if :NEW.ID is null then          select seq_procdsparent.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR procalgo.ID using SEQ seq_procalgo

PROMPT AUTO INC TRIGGER FOR Trigger for Table: procalgo
 CREATE OR REPLACE TRIGGER procalgo_TRIG before insert on procalgo    for each row begin     if inserting then       if :NEW.ID is null then          select seq_procalgo.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR analysisdataset.ID using SEQ seq_analysisdataset

PROMPT AUTO INC TRIGGER FOR Trigger for Table: analysisdataset
 CREATE OR REPLACE TRIGGER analysisdataset_TRIG before insert on analysisdataset    for each row begin     if inserting then       if :NEW.ID is null then          select seq_analysisdataset.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR compadsmap.ID using SEQ seq_compadsmap

PROMPT AUTO INC TRIGGER FOR Trigger for Table: compadsmap
 CREATE OR REPLACE TRIGGER compadsmap_TRIG before insert on compadsmap    for each row begin     if inserting then       if :NEW.ID is null then          select seq_compadsmap.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR block.ID using SEQ seq_block

PROMPT AUTO INC TRIGGER FOR Trigger for Table: block
 CREATE OR REPLACE TRIGGER block_TRIG before insert on block    for each row begin     if inserting then       if :NEW.ID is null then          select seq_block.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR files.ID using SEQ seq_files

PROMPT AUTO INC TRIGGER FOR Trigger for Table: files
 CREATE OR REPLACE TRIGGER files_TRIG before insert on files    for each row begin     if inserting then       if :NEW.ID is null then          select seq_files.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR filetier.ID using SEQ seq_filetier

PROMPT AUTO INC TRIGGER FOR Trigger for Table: filetier
 CREATE OR REPLACE TRIGGER filetier_TRIG before insert on filetier    for each row begin     if inserting then       if :NEW.ID is null then          select seq_filetier.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR fileparentage.ID using SEQ seq_fileparentage

PROMPT AUTO INC TRIGGER FOR Trigger for Table: fileparentage
 CREATE OR REPLACE TRIGGER fileparentage_TRIG before insert on fileparentage    for each row begin     if inserting then       if :NEW.ID is null then          select seq_fileparentage.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR filerunlumi.ID using SEQ seq_filerunlumi

PROMPT AUTO INC TRIGGER FOR Trigger for Table: filerunlumi
 CREATE OR REPLACE TRIGGER filerunlumi_TRIG before insert on filerunlumi    for each row begin     if inserting then       if :NEW.ID is null then          select seq_filerunlumi.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR filealgo.ID using SEQ seq_filealgo

PROMPT AUTO INC TRIGGER FOR Trigger for Table: filealgo
 CREATE OR REPLACE TRIGGER filealgo_TRIG before insert on filealgo    for each row begin     if inserting then       if :NEW.ID is null then          select seq_filealgo.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR filetriggertag.ID using SEQ seq_filetriggertag

PROMPT AUTO INC TRIGGER FOR Trigger for Table: filetriggertag
 CREATE OR REPLACE TRIGGER filetriggertag_TRIG before insert on filetriggertag    for each row begin     if inserting then       if :NEW.ID is null then          select seq_filetriggertag.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR fileassoc.ID using SEQ seq_fileassoc

PROMPT AUTO INC TRIGGER FOR Trigger for Table: fileassoc
 CREATE OR REPLACE TRIGGER fileassoc_TRIG before insert on fileassoc    for each row begin     if inserting then       if :NEW.ID is null then          select seq_fileassoc.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR procadsparent.ID using SEQ seq_procadsparent

PROMPT AUTO INC TRIGGER FOR Trigger for Table: procadsparent
 CREATE OR REPLACE TRIGGER procadsparent_TRIG before insert on procadsparent    for each row begin     if inserting then       if :NEW.ID is null then          select seq_procadsparent.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR analysisdsfilelumi.ID using SEQ seq_analysisdsfilelumi

PROMPT AUTO INC TRIGGER FOR Trigger for Table: analysisdsfilelumi
 CREATE OR REPLACE TRIGGER analysisdsfilelumi_TRIG before insert on analysisdsfilelumi    for each row begin     if inserting then       if :NEW.ID is null then          select seq_analysisdsfilelumi.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ====================================================
-- AUTO INC TRIGGER FOR seblock.ID using SEQ seq_seblock

PROMPT AUTO INC TRIGGER FOR Trigger for Table: seblock
 CREATE OR REPLACE TRIGGER seblock_TRIG before insert on seblock    for each row begin     if inserting then       if :NEW.ID is null then          select seq_seblock.nextval into :NEW.ID from dual;       end if;    end if; end;
/

-- ========= TIME STAMP TRIGGERS =======================

PROMPT Creating timestamp triggers
-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: person
CREATE OR REPLACE TRIGGER TRTSperson BEFORE INSERT OR UPDATE ON person
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: role
CREATE OR REPLACE TRIGGER TRTSrole BEFORE INSERT OR UPDATE ON role
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: assignedrole
CREATE OR REPLACE TRIGGER TRTSassignedrole BEFORE INSERT OR UPDATE ON assignedrole
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: physicsgroup
CREATE OR REPLACE TRIGGER TRTSphysicsgroup BEFORE INSERT OR UPDATE ON physicsgroup
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: schemaversion
CREATE OR REPLACE TRIGGER TRTSschemaversion BEFORE INSERT OR UPDATE ON schemaversion
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: runs
CREATE OR REPLACE TRIGGER TRTSruns BEFORE INSERT OR UPDATE ON runs
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: datatier
CREATE OR REPLACE TRIGGER TRTSdatatier BEFORE INSERT OR UPDATE ON datatier
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: lumisection
CREATE OR REPLACE TRIGGER TRTSlumisection BEFORE INSERT OR UPDATE ON lumisection
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: timelog
CREATE OR REPLACE TRIGGER TRTStimelog BEFORE INSERT OR UPDATE ON timelog
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: datatierorder
CREATE OR REPLACE TRIGGER TRTSdatatierorder BEFORE INSERT OR UPDATE ON datatierorder
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: reasoncode
CREATE OR REPLACE TRIGGER TRTSreasoncode BEFORE INSERT OR UPDATE ON reasoncode
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: recyclebin
CREATE OR REPLACE TRIGGER TRTSrecyclebin BEFORE INSERT OR UPDATE ON recyclebin
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: appfamily
CREATE OR REPLACE TRIGGER TRTSappfamily BEFORE INSERT OR UPDATE ON appfamily
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: appversion
CREATE OR REPLACE TRIGGER TRTSappversion BEFORE INSERT OR UPDATE ON appversion
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: appexecutable
CREATE OR REPLACE TRIGGER TRTSappexecutable BEFORE INSERT OR UPDATE ON appexecutable
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: queryableparameterset
CREATE OR REPLACE TRIGGER TRTSqueryableparameterset BEFORE INSERT OR UPDATE ON queryableparameterset
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: parameterbinding
CREATE OR REPLACE TRIGGER TRTSparameterbinding BEFORE INSERT OR UPDATE ON parameterbinding
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: triggerpathdescription
CREATE OR REPLACE TRIGGER TRTStriggerpathdescription BEFORE INSERT OR UPDATE ON triggerpathdescription
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: mcdescription
CREATE OR REPLACE TRIGGER TRTSmcdescription BEFORE INSERT OR UPDATE ON mcdescription
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: otherdescription
CREATE OR REPLACE TRIGGER TRTSotherdescription BEFORE INSERT OR UPDATE ON otherdescription
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: filestatus
CREATE OR REPLACE TRIGGER TRTSfilestatus BEFORE INSERT OR UPDATE ON filestatus
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: filetype
CREATE OR REPLACE TRIGGER TRTSfiletype BEFORE INSERT OR UPDATE ON filetype
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: filevalidstatus
CREATE OR REPLACE TRIGGER TRTSfilevalidstatus BEFORE INSERT OR UPDATE ON filevalidstatus
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: analysisdstype
CREATE OR REPLACE TRIGGER TRTSanalysisdstype BEFORE INSERT OR UPDATE ON analysisdstype
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: analysisdsstatus
CREATE OR REPLACE TRIGGER TRTSanalysisdsstatus BEFORE INSERT OR UPDATE ON analysisdsstatus
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: analysisdsdef
CREATE OR REPLACE TRIGGER TRTSanalysisdsdef BEFORE INSERT OR UPDATE ON analysisdsdef
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: compositeads
CREATE OR REPLACE TRIGGER TRTScompositeads BEFORE INSERT OR UPDATE ON compositeads
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: storageelement
CREATE OR REPLACE TRIGGER TRTSstorageelement BEFORE INSERT OR UPDATE ON storageelement
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: procdsstatus
CREATE OR REPLACE TRIGGER TRTSprocdsstatus BEFORE INSERT OR UPDATE ON procdsstatus
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: primarydstype
CREATE OR REPLACE TRIGGER TRTSprimarydstype BEFORE INSERT OR UPDATE ON primarydstype
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: qualityvalues
CREATE OR REPLACE TRIGGER TRTSqualityvalues BEFORE INSERT OR UPDATE ON qualityvalues
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: subsystem
CREATE OR REPLACE TRIGGER TRTSsubsystem BEFORE INSERT OR UPDATE ON subsystem
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: runlumiquality
CREATE OR REPLACE TRIGGER TRTSrunlumiquality BEFORE INSERT OR UPDATE ON runlumiquality
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: runlumidqint 
CREATE OR REPLACE TRIGGER TRTSrunlumidqint BEFORE INSERT OR UPDATE ON runlumidqint
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: qualityversion
CREATE OR REPLACE TRIGGER TRTSqualityversion BEFORE INSERT OR UPDATE ON qualityversion
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: branch
CREATE OR REPLACE TRIGGER TRTSbranch BEFORE INSERT OR UPDATE ON branch
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: branchhash
CREATE OR REPLACE TRIGGER TRTSbranchhash BEFORE INSERT OR UPDATE ON branchhash
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: branchhashmap
CREATE OR REPLACE TRIGGER TRTSbranchhashmap BEFORE INSERT OR UPDATE ON branchhashmap
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: algorithmconfig
CREATE OR REPLACE TRIGGER TRTSalgorithmconfig BEFORE INSERT OR UPDATE ON algorithmconfig
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: primarydatasetdescription
CREATE OR REPLACE TRIGGER TRTSprimarydatasetdescription BEFORE INSERT OR UPDATE ON primarydatasetdescription
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: primarydataset
CREATE OR REPLACE TRIGGER TRTSprimarydataset BEFORE INSERT OR UPDATE ON primarydataset
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: processeddataset
CREATE OR REPLACE TRIGGER TRTSprocesseddataset BEFORE INSERT OR UPDATE ON processeddataset
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: procdsruns
CREATE OR REPLACE TRIGGER TRTSprocdsruns BEFORE INSERT OR UPDATE ON procdsruns
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: procdstier
CREATE OR REPLACE TRIGGER TRTSprocdstier BEFORE INSERT OR UPDATE ON procdstier
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: procdsparent
CREATE OR REPLACE TRIGGER TRTSprocdsparent BEFORE INSERT OR UPDATE ON procdsparent
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: procalgo
CREATE OR REPLACE TRIGGER TRTSprocalgo BEFORE INSERT OR UPDATE ON procalgo
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: analysisdataset
CREATE OR REPLACE TRIGGER TRTSanalysisdataset BEFORE INSERT OR UPDATE ON analysisdataset
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: compadsmap
CREATE OR REPLACE TRIGGER TRTScompadsmap BEFORE INSERT OR UPDATE ON compadsmap
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: block
CREATE OR REPLACE TRIGGER TRTSblock BEFORE INSERT OR UPDATE ON block
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: files
CREATE OR REPLACE TRIGGER TRTSfiles BEFORE INSERT OR UPDATE ON files
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: filetier
CREATE OR REPLACE TRIGGER TRTSfiletier BEFORE INSERT OR UPDATE ON filetier
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: fileparentage
CREATE OR REPLACE TRIGGER TRTSfileparentage BEFORE INSERT OR UPDATE ON fileparentage
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: filerunlumi
CREATE OR REPLACE TRIGGER TRTSfilerunlumi BEFORE INSERT OR UPDATE ON filerunlumi
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: filealgo
CREATE OR REPLACE TRIGGER TRTSfilealgo BEFORE INSERT OR UPDATE ON filealgo
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: filetriggertag
CREATE OR REPLACE TRIGGER TRTSfiletriggertag BEFORE INSERT OR UPDATE ON filetriggertag
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: fileassoc
CREATE OR REPLACE TRIGGER TRTSfileassoc BEFORE INSERT OR UPDATE ON fileassoc
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: procadsparent
CREATE OR REPLACE TRIGGER TRTSprocadsparent BEFORE INSERT OR UPDATE ON procadsparent
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: analysisdsfilelumi
CREATE OR REPLACE TRIGGER TRTSanalysisdsfilelumi BEFORE INSERT OR UPDATE ON analysisdsfilelumi
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- ====================================================
-- LastModified Time Stamp Trigger

PROMPT LastModified Time Stamp Trigger for Table: seblock
CREATE OR REPLACE TRIGGER TRTSseblock BEFORE INSERT OR UPDATE ON seblock
FOR EACH ROW declare
  unixtime integer
     :=  (86400 * (sysdate - to_date('01/01/1970 00:00:00', 'DD/MM/YYYY HH24:MI:SS'))) - (to_number(substr(tz_offset(sessiontimezone),1,3))) * 3600 ;
BEGIN
  :NEW.LASTMODIFICATIONDATE := unixtime;
END;
/

-- Set the Schema Version -- 
INSERT INTO SchemaVersion(SCHEMAVERSION, INSTANCENAME, CREATIONDATE) values ('DBS_1_1_0', 'LOCAL', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
-- Pre Fill some information into tables ---------
INSERT INTO AnalysisDSStatus (Status, CREATIONDATE) VALUES ('NEW', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO FileStatus (Status, CREATIONDATE) VALUES ('VALID', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO FileStatus (Status, CREATIONDATE) VALUES ('INVALID', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO FileStatus (Status, CREATIONDATE) VALUES ('MERGED', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO FileStatus (Status, CREATIONDATE) VALUES ('IMPORTED', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO FileStatus (Status, CREATIONDATE) VALUES ('EXPORTED', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO ProcDSStatus (Status, CREATIONDATE) VALUES ('VALID', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO ProcDSStatus (Status, CREATIONDATE) VALUES ('INVALID', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO ProcDSStatus (Status, CREATIONDATE) VALUES ('EXPORTED', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO ProcDSStatus (Status, CREATIONDATE) VALUES ('IMPORTED', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO ProcDSStatus (Status, CREATIONDATE) VALUES ('RO', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO FileType(Type, CREATIONDATE) VALUES ('EDM', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual)) ;
INSERT INTO FileType(Type, CREATIONDATE) VALUES ('STREAMER', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual)) ;
INSERT INTO AnalysisDSType(Type, CREATIONDATE) VALUES ('TEST', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO PrimaryDSType  (Type, CreationDate) VALUES ('test', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO PrimaryDSType  (Type, CreationDate) VALUES ('mc', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO PrimaryDSType  (Type, CreationDate) VALUES ('cosmic', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO PrimaryDSType  (Type, CreationDate) VALUES ('align', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO PrimaryDSType  (Type, CreationDate) VALUES ('calib', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO PrimaryDSType  (Type, CreationDate) VALUES ('raw', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO PrimaryDSType  (Type, CreationDate) VALUES ('data', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO Person(Name, DistinguishedName, ContactInfo, CreationDate) Values ('DBSUSER', 'NODN', 'WH', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO FileValidStatus (Status, CreationDate) VALUES ('VALID', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO FileValidStatus (Status, CreationDate) VALUES ('INVALID', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO DataTierOrder(DataTierOrder, Description, CREATIONDATE) VALUES ('GEN', 'Generator output, four vectors and vertices in vacuum. For example, pythia events HepMCProduct', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO DataTierOrder(DataTierOrder, Description, CREATIONDATE) VALUES ('SIM', 'Simulated output from GEANT/OSCAR processing of GEN data  PSimHitContainer, EmbdSimVertexContainer, PCaloHitContainer, CrossingFrame', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO DataTierOrder(DataTierOrder, Description, CREATIONDATE) VALUES ('DIGI', 'Digitixed output from the various Digitizers that act on the SIM data    EBDigiCollection, HBHEDigiCollection, HFDigiCollection, StripDigiCollection, CSCStripDigiCollection, CSCWireDigiCollection', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO DataTierOrder(DataTierOrder, Description, CREATIONDATE) VALUES ('RECO', 'Reconstructed products produced from either real data or DIGI data', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO DataTierOrder(DataTierOrder, Description, CREATIONDATE) VALUES ('AOD', 'Analysis Object Data products TBA', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO DataTierOrder(DataTierOrder, Description, CREATIONDATE) VALUES ('AODSIM', 'Analysis Object Data SIM asked by Skim team', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO DataTierOrder(DataTierOrder, Description, CREATIONDATE) VALUES ('RAW', 'Raw detector output from the HLT system', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO DataTierOrder(DataTierOrder, Description, CREATIONDATE) VALUES ('ALCARECO', 'IS ITS A TIER ? TBA', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO DataTierOrder(DataTierOrder, Description, CREATIONDATE) VALUES ('USER', 'Things that users make afte AOD. The analysis equivalent of the kitchen sink TBA', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO DataTierOrder(DataTierOrder, Description, CREATIONDATE) VALUES ('GEN-SIM', 'Generator output, four vectors and vertices in vacuum. For example, pythia events HepMCProduct', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO DataTierOrder(DataTierOrder, Description, CREATIONDATE) VALUES ('GEN-SIM-DIGI', 'Generator output, four vectors and vertices in vacuum. For example, pythia events HepMCProduct', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO DataTierOrder(DataTierOrder, Description, CREATIONDATE) VALUES ('GEN-SIM-DIGI-RECO', 'Generator output, four vectors and vertices in vacuum. For example, pythia events HepMCProduct', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO DataTierOrder(DataTierOrder, Description, CREATIONDATE) VALUES ('DIGI-RECO', 'Min bias data', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO DataTierOrder(DataTierOrder, Description, CREATIONDATE) VALUES ('GEN-SIM-DIGI-RAW', 'SV Support 102463 for CSA 07', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO DataTier (Name, CreationDate) VALUES ('RAW', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO DataTier (Name, CreationDate) VALUES ('GEN', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO DataTier (Name, CreationDate) VALUES ('SIM', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO DataTier (Name, CreationDate) VALUES ('DIGI', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO DataTier (Name, CreationDate) VALUES ('RECO', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO DataTier (Name, CreationDate) VALUES ('ALCARECO', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO DataTier (Name, CreationDate) VALUES ('USER', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO DataTier (Name, CreationDate) VALUES ('AOD', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO DataTier (Name, CreationDate) VALUES ('AODSIM', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO PhysicsGroup (PhysicsGroupName, CreationDate) VALUES ('Individual', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO PhysicsGroup (PhysicsGroupName, CreationDate) VALUES ('Higgs', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO PhysicsGroup (PhysicsGroupName, CreationDate) VALUES ('SUSYBSM', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO PhysicsGroup (PhysicsGroupName, CreationDate) VALUES ('EWK', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO PhysicsGroup (PhysicsGroupName, CreationDate) VALUES ('Top', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO PhysicsGroup (PhysicsGroupName, CreationDate) VALUES ('QCD', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO PhysicsGroup (PhysicsGroupName, CreationDate) VALUES ('Diffraction', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO PhysicsGroup (PhysicsGroupName, CreationDate) VALUES ('OnSel', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO PhysicsGroup (PhysicsGroupName, CreationDate) VALUES ('Bphys', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO PhysicsGroup (PhysicsGroupName, CreationDate) VALUES ('Muons', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO PhysicsGroup (PhysicsGroupName, CreationDate) VALUES ('Egamma', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO PhysicsGroup (PhysicsGroupName, CreationDate) VALUES ('JetMet', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO PhysicsGroup (PhysicsGroupName, CreationDate) VALUES ('PFlowTau', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO PhysicsGroup (PhysicsGroupName, CreationDate) VALUES ('Btag', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO PhysicsGroup (PhysicsGroupName, CreationDate) VALUES ('RelVal', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO PhysicsGroup (PhysicsGroupName, CreationDate) VALUES ('PhysVal', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO PhysicsGroup (PhysicsGroupName, CreationDate) VALUES ('Tracker', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO QualityValues (Value, CreationDate) VALUES ('GOOD', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO QualityValues (Value, CreationDate) VALUES ('BAD', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
INSERT INTO QualityValues (Value, CreationDate) VALUES ('UNKNOWN', (select (sysdate - to_date('19700101','YYYYMMDD')) * 86400 from dual));
commit;
