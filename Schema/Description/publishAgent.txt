Help on module publishAgent:

NAME
    publishAgent - publishAgent.py

FILE
    /Users/ggraham/cms_dm_dev/importAgent/Python/publishAgent.py

DESCRIPTION
    This file contains APIP methods that use the ViewObjectLayer to 
    populate the DBS.  A utility class to read and parse SQL is included.
    Module level representations of the table schemas are constructed and
    stored at module level when the module is imported, but this should 
    probably go into a class at some point.  A DBSpublisher class is 
    included that contains views constructed from the individual schemas.
    Example inserts are at the end of the file in the __main__ section.
    
    Gregory Edwin Graham,   16-May-2005

CLASSES
    DBSpublisher
    ReadTable
    
    class DBSpublisher
     |  This class contains the entire DBS schema in 
     |  terms of approporiate ViewObjects.
     |  
     |  Methods defined here:
     |  
     |  __init__(self)
     |      Constructor
     |      This builds all of the required ViewObjects.
     |  
     |  adminAssignRole(self, name, role)
     |      API Method to assign a role.
     |      The arguments are in order : 
     |      
     |        name
     |          UNIX style name of the person
     |      
     |        role
     |          name of the role
     |  
     |  adminPerson(self, name, distinguishedname, contactinfo)
     |      API method to publish a person
     |      The arguments are in order:  
     |      
     |        name
     |          the UNIX style name of the person
     |      
     |        distinguishedname
     |          the grid credential distinguished name of the person
     |      
     |        contactinfo
     |          contact information
     |  
     |  adminPhysicsGroup(self, groupName, personName)
     |      API method to publish a physics group
     |      The arguments are in order:
     |      
     |        groupName 
     |          the physics group name
     |      
     |        personName
     |          the name of the convener
     |  
     |  adminRole(self, rolename, description)
     |      API method to publish a role
     |      The arguments are in order: 
     |      
     |        rolename
     |          the name of the role
     |      
     |        roledescription
     |          description of the role
     |  
     |  publishApplicationConfiguration(self, appFamName, exeName, appVersion, paramSetName, paramSetVersion, paramSetComments, parameterB
indings, inputType=None, outputType=None)
     |      API method for publishing an Application Configuration.
     |      The arguments are in order: 
     |      
     |        appFamName
     |          Application Family Name (eg- CMKIN, OSCAR, ORCA)
     |      
     |        exeName
     |          Executable Name  
     |      
     |        appVersion
     |          Application Version
     |      
     |        paramSetName
     |          Parameter Set Name  (A unique name to be given by 
     |                client for future reference.  This will be
     |                automatically generated in teh future.)
     |          
     |        paramSetVersion
     |          Parameter Set Version  (To be given by client for 
     |                future reference - this will be automatically 
     |                generated in the future..)
     |      
     |        paramSetVersion
     |          Parameter Set Comments 
     |      
     |        parameterBindings
     |          Parameter Bindings  (dictionary of key/value pairs)
     |      
     |        inputType (optional)
     |          Input Type (eg- NoInput, CMKIN, OSCAR, etc.)
     |      
     |        outputType (optional)
     |          OutputType (eg- CMKIN, OSCAR, ORCA, NoOutput, etc.)
     |  
     |  publishEventCollection(self, evcollStatus, validationStatus, nEvents, luminosity, collectionName, procDatasetID, evCollIndex, prim
aryEC, paramSetName, parameterBindings, filelist)
     |      API to publish an EventCollection
     |      The arguments are in order: 
     |      
     |        evcollStatus
     |          event collection status (eg- "OK")  
     |      
     |        validationStatus
     |          validation status (eg- "OK") 
     |      
     |        nEvents
     |          number of events
     |      
     |        luminosity
     |          estimated luminosity
     |      
     |        collectionName
     |          collection name (eg- COBRA collection nam, can be None) 
     |      
     |        procDatasetID
     |          processed dataset ID  (returned by publishProcessedDataset) 
     |      
     |        evCollIndex
     |          event collection index  (eg- Run number)
     |      
     |        primaryEC
     |          boolean: is this a "primary" evCollection?  'y' for CMKIN, 'n' 
     |                     otherwise.
     |      
     |        paramSetName
     |          parameter set name : this is a unique name for the parameter set
     |                     associated with the Event Collection.  (This will be
     |                     automatically generated in the future.)
     |      
     |        parameterBindings
     |          parameters : this is a dictionary containing the parameters 
     |                     describing this Event Collection. 
     |      
     |        filelist
     |          file list: list of tuples of 
     |               (logical file name, checksum, size, status, type)            
     |      
     |      NOTES: 
     |          This API is useful when event collections can be lined up  
     |          on the event collection index exactly across different 
     |          processing levels.  Parentage information is assumed to 
     |          be "collection 123 @ processing X"  is a parent of 
     |          "collection 123 @ processing Y" if Y follows X in 
     |          ProcessingPath.
     |  
     |  publishEventCollection2(self, evcollStatus, validationStatus, nEvents, luminosity, collectionName, procDatasetID, evCollIndex, par
entECList, paramSetName, parameterBindings, filelist)
     |      Another API to publish an EventCollection
     |      The arguments are in order: 
     |      
     |        evcollStatus
     |          event collection status (eg- "OK")  
     |      
     |        validationStatus
     |          validation status (eg- "OK") 
     |      
     |        nEvents
     |          number of events
     |      
     |        luminosity
     |          estimated luminosity
     |      
     |        collectionName
     |          collection name (eg- COBRA collection nam, can be None) 
     |      
     |        procDatasetID
     |          processed dataset ID  (returned by publishProcessedDataset) 
     |      
     |        evCollIndex
     |          event collection index  (eg- Run number)
     |      
     |        parentECList
     |          list of event collection IDs of the parents of this event collection.
     |      
     |        paramSetName
     |          parameter set name : this is a unique name for the parameter set
     |                     associated with the Event Collection.  (This will be
     |                     automatically generated in the future.)
     |      
     |        parameterBindings
     |          parameters : this is a dictionary containing the parameters 
     |                     describing this Event Collection. 
     |      
     |        filelist
     |          file list: list of tuples of 
     |               (logical file name, checksum, size, status, type)            
     |      
     |      NOTES: 
     |          This API is useful when event collections must be loaded 
     |          with multiple parents.  The "CompositeEventCollection" 
     |          table is used to track complex parentage relationships 
     |          directly.  This API method is not yet tested.
     |  
     |  publishPrimaryDataset(self, description, datasetName, datasetComments, streamName, physicsGroupName, streamComments=None)
     |      API method to publish a primary dataset
     |      The arguments are in order: 
     |      
     |        description
     |          A dictionary description of the dataset
     |              The dictionary can have MCChannel, MCProduction, and MCDecayChain
     |                 OR
     |              The dictionary can have TriggerPath
     |      
     |        datasetName
     |          A dataset name (eg- the COBRA dataset name) 
     |      
     |        datasetComments
     |          Comments
     |      
     |        streamName
     |          A Stream name
     |      
     |        physicsGroupName
     |          A physics group name
     |  
     |  publishProcessedDataset(self, datasetName, ownerName, parentProcPathID, applicationConfigID, agPath=None)
     |      API method to publish a processed dataset
     |      The arguments are in order
     |      
     |        datasetName
     |          dataset name of the primary dataset
     |      
     |        ownerName
     |          owner name (eg- the COBRA owner name)
     |      
     |        parantProcPathID
     |          parent processing path id (can be null) 
     |      
     |        applicationConfiguration
     |          application configuration id (returned by publishApplicationConfiguration)
     |  
     |  resetTransaction(self)
     |      This clears the transaction with implicit rollback.
     |      Implements TableInterface::resetTransaction
     |  
     |  saveTransaction(self)
     |      This clears the transaction with implicit commit.
     |      Implements TableInterface::saveTransaction
    
    class ReadTable
     |  This is a crap SQL parser to be replaced by Anzar and Vijay
     |  
     |  Methods defined here:
     |  
     |  __init__(self)
     |      Constructor
     |      This should fill the arrays below with the correct values
     |  
     |  getTable(self, i)
     |      This function reads a druid generated table definition
     |      and fills the arrays in the constructor
     |  
     |  makeObject(self)
     |      Using the filled arrays in the constructor, this calls
     |      SingleSchema from the ViewObjectLayer and returns the result.
     |      It also looks for attributes named "tableid" in tables named 
     |      "table" and if it finds one, makes it a sequencer.

DATA
    __revision__ = '$Revision: 1.3 $'
    __version__ = '$Id: publishAgent.py,v 1.3 2005/05/18 19:13:36 ggraham ...
    a = <publishAgent.ReadTable instance at 0x411260>
    allSchemas = {'analysiscollectiondata': <ViewObjectLayer.SingleSchema ...
    i = 722
    line = '\n'
    sqlContent = ['-- ====================================================...

VERSION
    $Id: publishAgent.txt,v 1.3 2005/05/20 04:47:54 ggraham Exp $
