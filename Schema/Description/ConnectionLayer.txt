Help on module ConnectionLayer:

NAME
    ConnectionLayer

FILE
    /Users/gregorygraham/druid/cms_dm_dev/importAgent/Python/ConnectionLayer.py

DESCRIPTION
    This is the Python connection layer for the DBS import 
    agent.  This connection layer is not thread safe nor
    useful for concurrent accesses to DBS of any kind.  
    
    Typical usage: 
    
    (1) Get a database connection object
    
        dbConn = ConnectionLayer.getConnection(**cParms) 
    
    where cParms are keywords understood by your database driver.
    
    (2) Use the Connection clas sinterface on dbConn.
    
        Queries: 
            queryExecute(sql)
            resultSet = queryExecuteWithResults(sql)
    
        Transactions:  
            commit()/rollback()  OR  begin/end/abortTransaction()
    
        Connection: 
            open()/close()
    
    (3) The database driver is hardcoded postgresql for the moment. 
          (a) To change drivers, import your driver instead of 
              pgdb "as databaseDriver" below.         
          (b) Change the list of _Properties in the Connection.__init__()
              method to reflect your driver.  The list should also 
              contin the item "alias" for system reasons.
          (c) Your driver must conform to Python DB API 2.0
    
    Gregory Edwin Graham
    21-Apr-2005
    
    GEG 25-Apr-2005 : Removed "SQL" style methods from Connection class.
    
    GEG 27-Apr-2005 : Cleaned up the comments and exceptions.

CLASSES
    Connection
    ConnectionJacuzzi
    exceptions.Exception
        JacuzziSingleton
    genException.genException(exceptions.Exception)
        ConnectionException
            TransactionException
        JacuzziException
    
    class Connection
     |  Interface class to database.  This maintains both the Python DB API 2.0
     |  cursor and connection internally and provides a simpler public interface
     |  that has connection and transaction sematics.  The connection is asusmed
     |  open upon object creation and cannot be reopened once closed.  Many 
     |  transactions can be executed on the connection while it is open.
     |  
     |  Methods defined here:
     |  
     |  __init__(self, connection, cName)
     |      Constructor takes a Python DB API 2.0 connection, and the name for
     |      the connection in the jacuzzi so that we can unlink it later when 
     |      the connection is closed.
     |  
     |  abortTransaction(self)
     |      Provides transaction semantics.  Closes a transaction 
     |      and disables queries.  If the transaction is open, then 
     |      an implicit rollback is done.
     |  
     |  beginTransaction(self, recycle=None)
     |      Provides transaction semantics. Opens a transaction 
     |      and enables queries.  This is done automatically by the 
     |      constructor, but you can also use this method to open 
     |      a new transaction on the connection.  If called when a
     |      transaction is already open, an implicit rollback is done. 
     |      If the recycle parameter is given, then a new cursor 
     |      is obtained.
     |  
     |  close(self)
     |      Close the connection.  It cannot be reopened.  Closing 
     |      the connection will abort any pending transactions.
     |  
     |  commit(self, recycle=None)
     |      This method does endTransaction() and beginTransaction().   
     |      It is an alternate to the other xxxTransaction() methods.
     |  
     |  connectionName(self)
     |      Returns the connection name as given in the constructor. 
     |      This contains the encoded connection parameters.
     |  
     |  endTransaction(self)
     |      Provides transaction semantics. Closes a transaction 
     |      and disables queries.  If the transaction is open, then 
     |      an implicit commit is done.
     |  
     |  open(self)
     |      Opens the connection.  This is already done in the constructor.
     |      But we forbid reopening of connections since it potentially 
     |      circumvents the Jacuzzi.
     |  
     |  queryExecute(self, qString)
     |      Executes a single query without fetching results from the cursor.
     |  
     |  queryExecuteWithResults(self, qString)
     |      Executes a query and fetches the result from the cursor.
     |      Returns the column description of the result with result  
     |      rows appended.
     |  
     |  rollback(self, recycle=None)
     |      This method does abortTransaction() and beginTransaction().   
     |      It is an alternate to the other xxxTransaction() methods.
    
    class ConnectionException(genException.genException)
     |  Exception class for the Connection class.
     |  Takes an error message argument and keywords.
     |  
     |  Method resolution order:
     |      ConnectionException
     |      genException.genException
     |      exceptions.Exception
     |  
     |  Methods defined here:
     |  
     |  __init__(self, msgText=None, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from genException.genException:
     |  
     |  __str__(self)
     |      Generate string representation of error.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.Exception:
     |  
     |  __getitem__(...)
    
    class ConnectionJacuzzi
     |  Maintains a "pool" of named connections.  Connections are 
     |  created by instantiating the Connection class at which
     |  time the connection is added to the pool. Since these
     |  are not anonymous connections, and they all have known
     |  propoerties derivable from their names, we call this a 
     |  Jacuzzi rather than a pool.
     |  
     |  Methods defined here:
     |  
     |  __init__(self, maxInJacuzzi=10)
     |      Constructor takes max size of Jacuzzi as sole argument.
     |      It defaults to 10.  maxInJacuzzi only has an effect on 
     |      the first call.  On subsequent calls the maxInJacuzzi 
     |      parameter has no effect.
     |  
     |  newConnection(self, **cParms)
     |      Returns an existing connection matching the given connection  
     |      parameters.  The connection parameters are given as keyword 
     |      arguments consistent with the properties defined in the constructor
     |      for the specific database driver.  An optional parameter alias can be 
     |      given with the keywords to support multiple connections with the 
     |      same (otherwise) connection parameters. If a connection is not already
     |      in the Jacuzzi as determined by uniqueness of the connection 
     |      parameters plus alias, a new connection is created and added to  
     |      the Jacuzzi.  If there are too many in the Jacuzzi, an exception 
     |      is raised.
     |  
     |  removeConnection(self, connection)
     |      Removes a connection from the Jacuzzi.  The connection 
     |      knows how to remove itself. Good night!
    
    class JacuzziException(genException.genException)
     |  Exception class for the ConnectionJacuzzi.
     |  Takes an error message argument and keywords.
     |  
     |  Method resolution order:
     |      JacuzziException
     |      genException.genException
     |      exceptions.Exception
     |  
     |  Methods defined here:
     |  
     |  __init__(self, msgText=None, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from genException.genException:
     |  
     |  __str__(self)
     |      Generate string representation of error.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.Exception:
     |  
     |  __getitem__(...)
    
    class JacuzziSingleton(exceptions.Exception)
     |  Singleton handler for the ConnectionJacuzzi class.
     |  Takes an instance argument.
     |  
     |  Methods defined here:
     |  
     |  __init__(self, instance)
     |  
     |  instance(self)
     |      Returns the instance contained in the exception.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.Exception:
     |  
     |  __getitem__(...)
     |  
     |  __str__(...)
    
    class TransactionException(ConnectionException)
     |  Exception for Transactions within a Connection.
     |  Takes an error message argument and keywords.
     |  
     |  Method resolution order:
     |      TransactionException
     |      ConnectionException
     |      genException.genException
     |      exceptions.Exception
     |  
     |  Methods defined here:
     |  
     |  __init__(self, msgText=None, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from genException.genException:
     |  
     |  __str__(self)
     |      Generate string representation of error.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.Exception:
     |  
     |  __getitem__(...)

FUNCTIONS
    getConnection(**cParms)
        Module level function to get a default connection.  The 
        connection parameters are given as keyword arguments.
    
    getConnectionJacuzzi(initMax=10)
        Module level function to get the Jacuzzi.  The Jacuzzi 
        itself is a singleton. The maximum number of entities 
        in the Jacuzzi is given in the initMax argument.  This
        defaults to 10, and only has an effect on the first call 
        that instantiates the Jacuzzi.  On subsequent calls 
        initMax is ignored.

DATA
    __revision__ = '$Revision: 1.2 $'
    __version__ = '$Id: ConnectionLayer.py,v 1.6 2005/05/12 21:00:48 ggrah...

VERSION
    $Id: ConnectionLayer.txt,v 1.2 2005/05/16 08:57:31 ggraham Exp $

