#!/usr/bin/env python
#-*- coding: ISO-8859-1 -*-
#
# Copyright 2008 Cornell University, Ithaca, NY 14853. All rights reserved.
#
# Author:  Valentin Kuznetsov, 2008

"""
CMS DBS du command
"""

import httplib, urllib, types, string, os, sys, re, urllib, urllib2, time
from optparse import OptionParser

def parseDBSoutput(data,oDict={},verbose=1):
    # output in a format 
    # <result SUM_FILE_SIZE='25155849149393' FILE_CREATEBY_DN='mlmiller@vocms19.cern.ch' />
    # I wanted this script be completely stand-alone, so I don't want to use XML parsers
    # which may not be installed on remote site, so plain filter on <result will work here.
    for item in data.split('\n'):
        if item.find("<result")==-1: continue
        r   = item.split("'")
        size= r[1]
        cby = r[3]
        if not size: continue
        if size=="None": continue
        if not cby : continue
        size = long(r[1])
        if oDict.has_key(cby):
            _size = oDict[cby]
            oDict[cby]=size+_size
        else:
            oDict[cby]=size
        if verbose:
            print sizeFormat(size),parseCreatedBy(cby)

def parseCreatedBy(input):
    if input and type(input) is types.StringType:
       try:
           dnList=input.split('/')
           lastItem = dnList[-1].replace("CN=","")
           itemList = []
           for item in lastItem.split():
               if  not re.match("[0-9]",item):
                   itemList.append(item)
           return ' '.join(itemList)
       except:
           pass
    return input

def sizeFormat(i):
    """
       Format file size utility, it converts file size into KB, MB, GB, TB, PB units
    """
    try:
       num=long(i)
    except:
       return "N/A"
    for x in ['','KB','MB','GB','TB','PB']:
        if num<1024.:
            snum=" "*(3-len(str(num).split('.')[0]))+"%3.1f"%num
            return "%s%s"%(snum,x)
#            return "%3.1f%s" % (num, x)
        num /=1024.
class DDOptionParser: 
  def __init__(self):
    self.parser = OptionParser()
    self.parser.add_option("--dbsInst",action="store", type="string", dest="dbsInst",
         help="specify DBS instance to use, e.g. --dbsInst=cms_dbs_prod_global")
    self.parser.add_option("--site",action="store",type="string",dest="site",
         help="specify a site name or pattern")
    self.parser.add_option("--file",action="store",type="string",dest="file",
         help="specify a file name or pattern")
    self.parser.add_option("-v","--verbose",action="store_true", default=False, dest="verbose",
         help="specify verbosity level")
  def getOpt(self):
    """
        Returns parse list of options
    """
    return self.parser.parse_args()

#
# main
#
if __name__ == "__main__":
    dbsInst='cms_dbs_prod_global'

    optManager  = DDOptionParser()
    (opts,args) = optManager.getOpt()
    site = opts.site
    if site.find("*")!=-1:
       site = "like %s"%site
    else:
       site = "= %s"%site
    file = opts.file
    if file.find("*")!=-1:
       file = "like %s"%file
    else:
       file = "= %s"%file

    if opts.dbsInst:
        dbsInstList=[opts.dbsInst]
    else:
        dbsInstList=['cms_dbs_prod_global','cms_dbs_int_global','cms_dbs_caf_analysis_01','cms_dbs_prod_tier0','cms_dbs_int_tier0','cms_dbs_ph_analysis_01','cms_dbs_ph_analysis_02']
        for i in range(1,10):
            if i<10: dbsInstList.append('cms_dbs_prod_local_0%s'%i)
            else   : dbsInstList.append('cms_dbs_prod_local_%s'%i)
    global_url="http://cmsdbsprod.cern.ch"
    query  = "find sum(file.size),file.createby where site %s and file %s"%(site,file)
    params = {'apiversion':'DBS_2_0_2','api':'executeQuery','query':query}
    oDict  = {}
    t0     = time.time()
    for dbs in dbsInstList:
        t1 = time.time()
        if dbs.find('tier0')!=-1: url="http://cmst0dbs.cern.ch"
        else: url = global_url
        dbsurl= url+"/%s/servlet/DBSServlet"%dbs
        print "\n### %s ###"%dbs.upper()
        data=urllib2.urlopen(dbsurl,urllib.urlencode(params,doseq=True)).read()
        parseDBSoutput(data,oDict)
        if  opts.verbose:
            print "+++ Finished in %3.1f sec"%(time.time()-t1)
    print "\n### TOTAL: ###"
    items = [(v, k) for k, v in oDict.items()]
    items.sort()
    items.reverse()
    for i in items: print sizeFormat(i[0]),parseCreatedBy(i[1])
    if  opts.verbose:
        print "+++ Total time %3.1f sec"%(time.time()-t0)

