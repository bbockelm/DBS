#!/usr/bin/env python
#-*- coding: ISO-8859-1 -*-
#
# Copyright 2008 Cornell University, Ithaca, NY 14853. All rights reserved.
#
# Author:  Valentin Kuznetsov, 2008

"""
CMS DBS du command
"""

import httplib, urllib, types, string, os, sys, re, urllib, urllib2, time
from optparse import OptionParser

def findInString(s,pat1,pat2,oList=[]):
    idx1 = s.find(pat1)
    idx2 = s.find(pat2)
    if idx1==-1:
       return
    if idx2==-1:
       oList.append(s[idx1+len(pat1):])
       return
    oList.append(s[idx1+len(pat1):idx2])
    return findInString(s[idx2+len(pat2):],pat1,pat2,oList)

def parseDBSoutput(data,titles):
    # output in a format 
    # <result SUM_FILE_SIZE='25155849149393' FILE_CREATEBY_DN='mlmiller@vocms19.cern.ch' />
    # I wanted this script be completely stand-alone, so I don't want to use XML parsers
    # which may not be installed on remote site, so plain filter on <result will work here.
    oDict = {}
    oList = []
    lList = [len(t) for t in titles]
    for item in data.split('\n'):
        if item.find("<result")==-1: continue
        r   = item.split("'")
        item = []
        counter = 0
        for idx in range(1,len(r),2):
            elem = r[idx]
            if r[idx-1].lower().find("size=")!=-1: elem = long(r[idx])
            if r[idx-1].lower().find("dn=")!=-1: elem = parseCreatedBy(r[idx])
            if r[idx-1].lower().find("date=")!=-1: elem = parseDate(r[idx])
            item.append(elem)
            if  not lList or len(lList)==counter:
                lList.append(len(elem))
            else:
                if lList[counter]<len(str(elem)): lList[counter]=len(str(elem))
            counter+=1    
        if  oDict.has_key(item[1]):
            size = oDict[item[1]]
            oDict[item[1]]=size+item[0]
        else:
            oDict[item[1]]=item[0]
    for key in oDict.keys():
        oList.append((oDict[key],key))
    return oList,lList

def printList(iList,lenList):
    for idx in range(0,len(iList)):
        item = str(iList[idx])
        if  len(item)<lenList[idx]:
            elem=str(item)+" "*(lenList[idx]-len(item))
        else: elem = item
        print elem,
    print

def parseDate(input):
    # we are getting timestamps in a form 2008-03-13 18:17:17 CET
    date = input.split()[0]
    return date
    
def parseCreatedBy(input):
    if input and type(input) is types.StringType:
       try:
           dnList=input.split('/')
           lastItem = dnList[-1].replace("CN=","").replace("E=","")
           itemList = []
           for item in lastItem.split():
               if  not re.match("[0-9]",item):
                   itemList.append(item)
           return ' '.join(itemList)
       except:
           pass
    return input

def sizeFormat(i):
    """
       Format file size utility, it converts file size into KB, MB, GB, TB, PB units
    """
    try:
       num=long(i)
    except:
       return "N/A"
    for x in ['','KB','MB','GB','TB','PB']:
        if num<1024.:
            snum=" "*(3-len(str(num).split('.')[0]))+"%3.1f"%num
            return "%s%s"%(snum,x)
#            return "%3.1f%s" % (num, x)
        num /=1024.
class DDOptionParser: 
  def __init__(self):
    self.parser = OptionParser()
    self.parser.add_option("--dbsInst",action="store", type="string", dest="dbsInst",
         help="specify DBS instance to use, e.g. --dbsInst=cms_dbs_prod_global, by default we scan all known DBS instances.")
    self.parser.add_option("-s","--site",action="store",type="string",dest="site",
         help="specify a site name or pattern")
    self.parser.add_option("-f","--file",action="store",type="string",dest="file",default="*",
         help="specify a file name or pattern")
    self.parser.add_option("-g","--group",action="store",type="string",dest="group",
         help="specify grouping of your output: creator|date|tier, with creator as default")
    self.parser.add_option("-a","--above",action="store",type="string",dest="adate",
         help="specify set of date stamps above you want to query. Date should be in YYYY-MM-DD format")
    self.parser.add_option("-b","--below",action="store",type="string",dest="bdate",
         help="specify set of date stamps below you want to query. Date should be in YYYY-MM-DD format")
    self.parser.add_option("-t","--total",action="store_true", default=False, dest="total",
         help="specify if you want total sum of the results, useful when scan multiple instances")
    self.parser.add_option("-v","--verbose",action="store_true", default=False, dest="verbose",
         help="specify verbosity level")
  def getOpt(self):
    """
        Returns parse list of options
    """
    return self.parser.parse_args()

#
# main
#
if __name__ == "__main__":
    dbsInst='cms_dbs_prod_global'

    optManager  = DDOptionParser()
    (opts,args) = optManager.getOpt()

    site = opts.site
    if not site:
       print "site should be specified, see --help for help"
       sys.exit(1)
    if site.find("*")!=-1:
       site = "like %s"%site
    elif site.find(",")!=-1:
       site = "in %s"%str(site.split(",")).replace("[","(").replace("]",")")
    else:
       site = "= %s"%site
    file = opts.file
    if file.find("*")!=-1:
       file = "like %s"%file
    else:
       file = "= %s"%file

    group = "file.createby"
    if opts.group=="tier":
       group = "file.tier"
    elif opts.group=="date":
       group = "file.createdate"
    elif opts.group=="creator":
       group = "file.createby"

    if opts.dbsInst:
        dbsInstList=[opts.dbsInst]
    else:
        dbsInstList=['cms_dbs_prod_global','cms_dbs_int_global','cms_dbs_caf_analysis_01','cms_dbs_prod_tier0','cms_dbs_int_tier0','cms_dbs_ph_analysis_01','cms_dbs_ph_analysis_02']
        for i in range(1,10):
            if i<10: dbsInstList.append('cms_dbs_prod_local_0%s'%i)
            else   : dbsInstList.append('cms_dbs_prod_local_%s'%i)
    global_url="http://cmsdbsprod.cern.ch"
    query  = "find sum(file.size),%s where site %s and file %s"%(group,site,file)
    if  opts.adate:
        query+=" and file.createdate > %s"%opts.adate
    if  opts.bdate:
        query+=" and file.createdate < %s"%opts.bdate
    if opts.verbose:
        print query
    params = {'apiversion':'DBS_2_0_2','api':'executeQuery','query':query}
    oDict  = {} # dict which keep total info, in a for oDict[cby]=size

    tList = []
    findInString(query,"find","where",tList)
    titles = [i.strip() for i in tList[0].split(",")]

    t0     = time.time()
    for dbs in dbsInstList:
        t1 = time.time()
        if dbs.find('tier0')!=-1: url="http://cmst0dbs.cern.ch"
        else: url = global_url
        dbsurl= url+"/%s/servlet/DBSServlet"%dbs
        print "\n### %s ###"%dbs.upper()
        data=urllib2.urlopen(dbsurl,urllib.urlencode(params,doseq=True)).read()
        if  data.find("exception")!=-1:
            print data
            sys.exit(1)
        oList,lenList = parseDBSoutput(data,titles)
        oList.sort()
        oList.reverse()
        # results are coming back as [ [list of results] ], so we wrap titles too
        for item in [titles]:
            printList(item,lenList)
        for item in oList:
            printList((sizeFormat(item[0]),item[1]),lenList)
            if  opts.total:
                if  oDict.has_key(item[1]):
                    size = oDict[item[1]]
                    oDict[item[1]]=item[0]+size
                else:
                    oDict[item[1]]=item[0]
        if  opts.verbose:
            print "+++ Finished in %3.1f sec"%(time.time()-t1)
    print

    if  opts.total:
        print "\n### TOTAL: ###"
        items = [(v, k) for k, v in oDict.items()]
        items.sort()
        items.reverse()
        for i in items: print sizeFormat(i[0]),i[1]
        if  opts.verbose:
            print "+++ Total time %3.1f sec"%(time.time()-t0)

