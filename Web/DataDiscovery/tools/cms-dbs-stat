#!/usr/bin/env python
#-*- coding: ISO-8859-1 -*-
#
# Copyright 2008 Cornell University, Ithaca, NY 14853. All rights reserved.
#
# Author:  Valentin Kuznetsov, 2008

"""
CMS DBS stat command
"""

import httplib, urllib, types, string, os, sys, re, urllib, urllib2, time
from optparse import OptionParser

def parseDBSoutput(data,titles):
    # output in a format 
    # <result SUM_FILE_SIZE='25155849149393' FILE_CREATEBY_DN='mlmiller@vocms19.cern.ch' />
    # I wanted this script be completely stand-alone, so I don't want to use XML parsers
    # which may not be installed on remote site, so plain filter on <result will work here.
    oList = []
    lList = [len(t) for t in titles]
    for item in data.split('\n'):
        if item.find("<result")==-1: continue
        r   = item.split("'")
        item = []
        counter = 0
        for idx in range(1,len(r),2):
            elem = r[idx]
            if counter==3: elem = sizeFormat(r[idx])
            item.append(elem)
            if  not lList or len(lList)==counter:
                lList.append(len(elem))
            else:
                if lList[counter]<len(elem): lList[counter]=len(elem)
            counter+=1    
        oList.append(item)
    return oList,lList

def printList(iList,lenList):
    for idx in range(0,len(iList)):
        if  len(iList[idx])<lenList[idx]:
            elem=str(iList[idx])+" "*(lenList[idx]-len(iList[idx]))
        else: elem = iList[idx]
        print elem,
    print

def parseCreatedBy(input):
    if input and type(input) is types.StringType:
       try:
           dnList=input.split('/')
           lastItem = dnList[-1].replace("CN=","").replace("E=","")
           itemList = []
           for item in lastItem.split():
               if  not re.match("[0-9]",item):
                   itemList.append(item)
           return ' '.join(itemList)
       except:
           pass
    return input

def sizeFormat(i):
    """
       Format file size utility, it converts file size into KB, MB, GB, TB, PB units
    """
    try:
       num=long(i)
    except:
       return "N/A"
    for x in ['','KB','MB','GB','TB','PB']:
        if num<1024.:
            snum=" "*(3-len(str(num).split('.')[0]))+"%3.1f"%num
            return "%s%s"%(snum,x)
#            return "%3.1f%s" % (num, x)
        num /=1024.

class DDOptionParser: 
  def __init__(self):
    self.parser = OptionParser()
    self.parser.add_option("--dbsInst",action="store", type="string", dest="dbsInst", 
         default="cms_dbs_prod_global",
         help="specify DBS instance to use, default cms_dbs_prod_global")
    self.parser.add_option("-s","--site",action="store",type="string",dest="site",
         help="specify a site name or pattern")
    self.parser.add_option("-f","--file",action="store",type="string",dest="file",
         help="specify a file name or pattern")
    self.parser.add_option("-d","--dataset",action="store",type="string",dest="dataset",
         help="specify a dataset name or pattern")
    self.parser.add_option("-l","--long",action="store_true", default=False, dest="extend",
         help="specify extended list options")
    self.parser.add_option("-t","--titles",action="store_true", default=False, dest="titles",
         help="list titles for help")
    self.parser.add_option("-v","--verbose",action="store_true", default=False, dest="verbose",
         help="specify verbosity level")
  def getOpt(self):
    """
        Returns parse list of options
    """
    return self.parser.parse_args()

#
# main
#
if __name__ == "__main__":
    dbsInst='cms_dbs_prod_global'

    optManager  = DDOptionParser()
    (opts,args) = optManager.getOpt()
    dataset = opts.dataset

    if opts.dbsInst:
        dbsInstList=[opts.dbsInst]
    else:
        dbsInstList=['cms_dbs_prod_global','cms_dbs_int_global','cms_dbs_caf_analysis_01','cms_dbs_prod_tier0','cms_dbs_int_tier0','cms_dbs_ph_analysis_01','cms_dbs_ph_analysis_02']
        for i in range(1,10):
            if i<10: dbsInstList.append('cms_dbs_prod_local_0%s'%i)
            else   : dbsInstList.append('cms_dbs_prod_local_%s'%i)
    global_url="http://cmsdbsprod.cern.ch"
    titles = []
    sel    = "dataset"
    if opts.extend:
       sel = "dataset, site, count(file),sum(file.size),sum(file.numevents)"
       titles = ['dataset','se','# files','tot size','# evts']
       titles = [t.upper() for t in titles]

    def getOp(arg):
        if arg.find(",")!=-1:
           return " in "
        elif arg.find("*")!=-1:
           return "like"
        else:
           return "="

    wClause = ""
    what    = ""
    if opts.dataset:
       arg = opts.dataset
       if arg.find(",")!=-1: arg="("+arg+")"
       key = "dataset"
       if wClause: wClause+=" and " 
       wClause+=" %s %s %s "%(key,getOp(arg),arg)
       what+=" %s:%s "%(key,arg)
    if opts.file:
       arg = opts.file
       key = "file"
       if wClause: wClause+=" and " 
       wClause+=" %s %s %s "%(key,getOp(arg),arg)
       what+=" %s:%s "%(key,arg)
    if opts.site:
       arg = opts.site
       key = "site"
       if wClause: wClause+=" and " 
       wClause+=" %s %s %s "%(key,getOp(arg),arg)
       what+=" %s:%s "%(key,arg)

    query  = "find %s where %s"%(sel,wClause)
    if opts.verbose:
       print "### DBS-QL query: %s"%query
    params = {'apiversion':'DBS_2_0_2','api':'executeQuery','query':query}
    t0     = time.time()
    for dbs in dbsInstList:
        t1 = time.time()
        if dbs.find('tier0')!=-1: url="http://cmst0dbs.cern.ch"
        else: url = global_url
        dbsurl= url+"/%s/servlet/DBSServlet"%dbs
        if  opts.verbose:
            print "\n### %s ###"%dbs.upper()
            print "### datasets for %s"%what
        data=urllib2.urlopen(dbsurl,urllib.urlencode(params,doseq=True)).read()
        oList,lenList = parseDBSoutput(data,titles)
        for item in oList:
            printList(item,lenList)
    print
    if  opts.titles:
        printList(titles,lenList) 
    if  opts.verbose:
        print "### Total %s files"%len(oList)
        print "### Finished in %3.1f sec"%(time.time()-t1)

