#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'
__CHEETAH_genTime__ = 'Sun Mar  4 15:25:30 2007'
__CHEETAH_srcLastModified__ = 'Sat Mar  3 09:41:06 2007'
__CHEETAH_src__ = 'Templates/tmpl/templateDataFromSelection.tmpl'
__CHEETAH_version__ = '2.0b5'

##################################################
## CLASSES

class templateDataFromSelection(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        Template.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahAttributes(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if not trans and not callable(self.transaction):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('<p><b>\nBased on your search criteria:\n<em>')
        _v = VFFSL(SL,"keywords",True) # $keywords
        if _v is not None: write(_filter(_v, rawExpr='$keywords')) # from line 3, col 5.
        write('''</em>
</b>
</p>

''')
        if len(VFFSL(SL,"oList",True)):
            write('<form action="" method="get">\n')
            if len(VFFSL(SL,"oList",True))>15:
                write('''<table><tr valign="bottom"><td>
Please make your selection from the table below.
To submit your request click:
</td><td>
<table class="table_box"><tr><td>
<a href="javascript:ajaxGenParentsGraphFromSelection();ajaxGetDataFromSelection();showWaitingMessage();">Find</a>
</td></tr></table>
</td></tr></table>
''')
            write('''<p><span id="SelectionHandler" name="SelectionHandler"></span></p>
<script type="text/javascript">UnSelectAll()</script>
<table id="search1" class="sortable" cellspacing="0" cellpadding="0" border="1">
<tr class="sortable_gray" align="center">
<td></td>
''')
            if not VFFSL(SL,"userMode",True):
                write(':\n<td>DBS instances</td>\n')
            write('''<td>Primary dataset</td>
<td>Data tier</td>
<td>software version</td>
<td>family</td>
<td>executable</td>
</tr>
''')
            for item in VFFSL(SL,"oList",True):
                dbsInst = VFFSL(SL,"item",True)[0]
                dbsId = VFN(VFFSL(SL,"dbsInst",True),"replace",False)('/','_')
                prim = VFFSL(SL,"item",True)[1]
                tier = VFFSL(SL,"item",True)[2]
                ver = VFFSL(SL,"item",True)[3]
                fam = VFFSL(SL,"item",True)[4]
                exe = VFFSL(SL,"item",True)[5]
                write('<tr class="sortable_yellow" align="center">\n<td><input type="checkbox" value="')
                _v = VFFSL(SL,"dbsInst",True) # ${dbsInst}
                if _v is not None: write(_filter(_v, rawExpr='${dbsInst}')) # from line 42, col 35.
                write('___')
                _v = VFFSL(SL,"prim",True) # ${prim}
                if _v is not None: write(_filter(_v, rawExpr='${prim}')) # from line 42, col 48.
                write('___')
                _v = VFFSL(SL,"tier",True) # ${tier}
                if _v is not None: write(_filter(_v, rawExpr='${tier}')) # from line 42, col 58.
                write('___')
                _v = VFFSL(SL,"ver",True) # ${ver}
                if _v is not None: write(_filter(_v, rawExpr='${ver}')) # from line 42, col 68.
                write('___')
                _v = VFFSL(SL,"fam",True) # ${fam}
                if _v is not None: write(_filter(_v, rawExpr='${fam}')) # from line 42, col 77.
                write('___')
                _v = VFFSL(SL,"exe",True) # ${exe}
                if _v is not None: write(_filter(_v, rawExpr='${exe}')) # from line 42, col 86.
                write('" name="userSelection" /></td>\n')
                if not VFFSL(SL,"userMode",True):
                    write(':\n<td>')
                    _v = VFFSL(SL,"dbsInst",True) # $dbsInst
                    if _v is not None: write(_filter(_v, rawExpr='$dbsInst')) # from line 44, col 5.
                    write('</td>\n')
                write('<td>')
                _v = VFFSL(SL,"prim",True) # $prim
                if _v is not None: write(_filter(_v, rawExpr='$prim')) # from line 46, col 5.
                write('</td>\n<td>')
                _v = VFFSL(SL,"tier",True) # $tier
                if _v is not None: write(_filter(_v, rawExpr='$tier')) # from line 47, col 5.
                write('</td>\n<td>')
                _v = VFFSL(SL,"ver",True) # $ver
                if _v is not None: write(_filter(_v, rawExpr='$ver')) # from line 48, col 5.
                write('</td>\n<td>')
                _v = VFFSL(SL,"fam",True) # $fam
                if _v is not None: write(_filter(_v, rawExpr='$fam')) # from line 49, col 5.
                write('</td>\n<td>')
                _v = VFFSL(SL,"exe",True) # $exe
                if _v is not None: write(_filter(_v, rawExpr='$exe')) # from line 50, col 5.
                write('</td>\n</tr>\n')
            write('''</table>
<br />
<table><tr valign="center"><td>
Please make your selection from the table above.
To submit your request click:
</td><td>
<table class="table_box"><tr><td>
<a href="javascript:ajaxGenParentsGraphFromSelection();ajaxGetDataFromSelection();showWaitingMessage();">Find</a>
</td></tr></table>
</td></tr></table>
</form>
''')
        else:
            if not VFFSL(SL,"firstSearch",True):
                write('No match found for your request, please refine your search.\n')
            # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    def __str__(self): return self.respond()

    _mainCheetahMethod_for_templateDataFromSelection= 'respond'
if not hasattr(templateDataFromSelection, '_initCheetahAttributes'):
    templateClass = getattr(templateDataFromSelection, '_CHEETAH_templateClass', Template)
    templateClass._assignRequiredMethodsToClass(templateDataFromSelection)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=templateDataFromSelection()).run()


