#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'
__CHEETAH_genTime__ = 'Sun Mar  4 15:25:40 2007'
__CHEETAH_srcLastModified__ = 'Sat Mar  3 09:52:37 2007'
__CHEETAH_src__ = 'Templates/tmpl/templateGlossary.tmpl'
__CHEETAH_version__ = '2.0b5'

##################################################
## CLASSES

class templateGlossary(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        Template.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahAttributes(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if not trans and not callable(self.transaction):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('<div class="sectionhead">DATA DISCOVERY GLOSSARY PAGE</div>\n')
        # 
        # <b>Application</b> refers to set of software version, e.g. CMSSW_0_8_1,
        # family type, e.g. Merged, RECO, and program used to produce this data, e.g. cmsRun.
        # <p></p>
        # <b>Primary dataset</b> identifies the data origin, e.g.
        # common MC production criteria or trigger line for real data.
        # <p></p>
        # <b>Data tier</b> is a data type, e.g. RAW, RECO, DIGI, etc.
        # <p></p>
        # <b>cff</b> is a configuration file fragment
        # <p></p>
        write('''
<p>
The naming conventions used on discovery page are discussed
<a href="https://twiki.cern.ch/twiki/bin/view/CMS/DBS-TDR/">DBS roadmap</a> as well as in 
<a href="https://twiki.cern.ch/twiki/bin/view/CMS/CMST0DataManagement">CMST0DataManagement</a>
and
<a href="https://twiki.cern.ch/twiki/bin/view/CMS/ProdForCSA06">ProdForCSA06</a> pages
</p>

<div class="indent">
<table width="80%" class="intro">
<tr valign="top">
<td class="box_gray">
Dataset
</td>
<td class="box_gray">
a set of files representing a coherent sample. Datasets are defined primarily by processing 
history and event selection criteria. 
</td>
</tr>

<tr><td colspan="2"><hr class="dbs" /></td></tr>

<tr valign="top">
<td>
Primary Dataset
</td>
<td>
Data at all levels of processing pertaining to a given trigger or common MC production 
criteria. For data from the experiment, the primary dataset is determined by the HLT event 
classification. For Monte Carlo data, primary datasets comprise data generated with the same 
parameters; the granularity of this classification has yet to be decided. 
</td>
</tr>

<tr><td colspan="2"><hr class="dbs" /></td></tr>

<tr valign="top">
<td>
Processed Dataset
</td>
<td>
A slice of data from a Primary Dataset defined by the processing history applied to 
it. A processed dataset will correspond to a large production of data with a single ma jor software 
release version, but may include multiple minor versions for small bug fixes and also may contain 
the output of multiple processings of some given input data. 
</td>
</tr>

<tr><td colspan="2"><hr class="dbs" /></td></tr>

<tr valign="top">
<td>
Analysis Dataset
</td>
<td>
A subset of a Processed Dataset representing a coherent sample for physics analysis, 
specified (conceptually) by running an analysis query on a Processed Dataset at a particular instant 
of time. An Analysis Dataset must not contain the output of multiple processings of any given input 
data.
</td>
</tr>

<tr><td colspan="2"><hr class="dbs" /></td></tr>

<tr valign="top">
<td> 
Luminosity Section
</td>
<td>
a predefined period of data taking where the instantaneous luminosity can be 
considered constant. Files intended for physics analysis will begin and end on luminosity section 
boundaries.
</td>
</tr>

<tr valign="top">
<td> 
Data Tier
</td>
<td>
A set of ob jects to be grouped togethered in the output files of the processing step producing 
the ob jects. The list of ob jects comprising a Data Tier is determined by the release configuration 
files. Additional ob jects not part of the Data Tier may be included in the same output file. 
</td>
</tr>

<tr><td colspan="2"><hr class="dbs" /></td></tr>

<tr valign="top">
<td>
File Block
</td>
<td>
A slicing of a dataset into chunks of files likely to be accessed together. The File Block is a 
data management packaging unit for the convenience of the data location and transfer services. 
Logical File Name (LFN)-globally unique, site independent file specification suitable for use in job 
configuration. 
</td>
</tr>

<tr><td colspan="2"><hr class="dbs" /></td></tr>

<tr valign="top">
<td>
Physical File Name (PFN)
</td>
<td>
a site-dependent file specification which can be used to access a file at a 
particular site.
</td>
</tr>
</table>

</div>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    def __str__(self): return self.respond()

    _mainCheetahMethod_for_templateGlossary= 'respond'
if not hasattr(templateGlossary, '_initCheetahAttributes'):
    templateClass = getattr(templateGlossary, '_CHEETAH_templateClass', Template)
    templateClass._assignRequiredMethodsToClass(templateGlossary)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=templateGlossary()).run()


