#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'
__CHEETAH_genTime__ = 'Sun Mar  4 15:25:25 2007'
__CHEETAH_srcLastModified__ = 'Sat Mar  3 09:53:34 2007'
__CHEETAH_src__ = 'Templates/tmpl/templateAppConfigs.tmpl'
__CHEETAH_version__ = '2.0b5'

##################################################
## CLASSES

class templateAppConfigs(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        Template.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahAttributes(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if not trans and not callable(self.transaction):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        rel = VFN(VFFSL(SL,"appPath",True),"split",False)("/")[1]
        write('Release: <b>')
        _v = VFFSL(SL,"rel",True) # $rel
        if _v is not None: write(_filter(_v, rawExpr='$rel')) # from line 2, col 13.
        write('''</b>
<p />

<table class="dbs_table">
<tr>
<th>File name</th>
<th>Version</th>
<th>Type</th>
<th>Annotation</th>
<th>Creation Date</th>
<th>Created By</th>
<th>Modifictaion Date</th>
<th>Modified By</th>
<th>Releases</th>
<th></th>
</tr>
''')
        for config in VFFSL(SL,"configList",True):
            id = VFFSL(SL,"config",True)[0]
            name = VFFSL(SL,"config",True)[1]
            ver = VFFSL(SL,"config",True)[2]
            type = VFFSL(SL,"config",True)[3]
            ann = VFFSL(SL,"config",True)[4]
            cDate = VFFSL(SL,"config",True)[5]
            cBy = VFFSL(SL,"config",True)[6]
            mDate = VFFSL(SL,"config",True)[7]
            mBy = VFFSL(SL,"config",True)[8]
            write('<tr>\n<td><a href="javascript:popUp(\'')
            _v = VFFSL(SL,"host",True) # $host
            if _v is not None: write(_filter(_v, rawExpr='$host')) # from line 29, col 32.
            write('/getConfigContent?dbsInst=')
            _v = VFFSL(SL,"dbsInst",True) # $dbsInst
            if _v is not None: write(_filter(_v, rawExpr='$dbsInst')) # from line 29, col 63.
            write('&amp;id=')
            _v = VFFSL(SL,"id",True) # $id
            if _v is not None: write(_filter(_v, rawExpr='$id')) # from line 29, col 79.
            write('&amp;name=')
            _v = VFFSL(SL,"name",True) # $name
            if _v is not None: write(_filter(_v, rawExpr='$name')) # from line 29, col 92.
            write('\',1000)">')
            _v = VFFSL(SL,"name",True) # $name
            if _v is not None: write(_filter(_v, rawExpr='$name')) # from line 29, col 106.
            write('</a></td>\n<td>')
            _v = VFFSL(SL,"ver",True) # $ver
            if _v is not None: write(_filter(_v, rawExpr='$ver')) # from line 30, col 5.
            write('</td>\n<td>')
            _v = VFFSL(SL,"type",True) # $type
            if _v is not None: write(_filter(_v, rawExpr='$type')) # from line 31, col 5.
            write('</td>\n<td>')
            _v = VFFSL(SL,"ann",True) # $ann
            if _v is not None: write(_filter(_v, rawExpr='$ann')) # from line 32, col 5.
            write('</td>\n<td>')
            _v = VFFSL(SL,"cDate",True) # $cDate
            if _v is not None: write(_filter(_v, rawExpr='$cDate')) # from line 33, col 5.
            write('</td>\n<td>')
            _v = VFFSL(SL,"cBy",True) # $cBy
            if _v is not None: write(_filter(_v, rawExpr='$cBy')) # from line 34, col 5.
            write('</td>\n<td>')
            _v = VFFSL(SL,"mDate",True) # $mDate
            if _v is not None: write(_filter(_v, rawExpr='$mDate')) # from line 35, col 5.
            write('</td>\n<td>')
            _v = VFFSL(SL,"mBy",True) # $mBy
            if _v is not None: write(_filter(_v, rawExpr='$mBy')) # from line 36, col 5.
            write('</td>\n<td>\n<select id="config_')
            _v = VFFSL(SL,"name",True) # $name
            if _v is not None: write(_filter(_v, rawExpr='$name')) # from line 38, col 20.
            write('">\n')
            for r in VFFSL(SL,"releases",True):
                write('<option>')
                _v = VFFSL(SL,"r",True) # $r
                if _v is not None: write(_filter(_v, rawExpr='$r')) # from line 40, col 9.
                write('</option>\n')
            write('</select>\n</td>\n<td><input type="button" value="Compare" id="button_')
            _v = VFFSL(SL,"name",True) # $name
            if _v is not None: write(_filter(_v, rawExpr='$name')) # from line 44, col 53.
            write('" onclick="javascript:CompareAppConfigs(\'')
            _v = VFFSL(SL,"host",True) # $host
            if _v is not None: write(_filter(_v, rawExpr='$host')) # from line 44, col 99.
            write("','")
            _v = VFFSL(SL,"dbsInst",True) # $dbsInst
            if _v is not None: write(_filter(_v, rawExpr='$dbsInst')) # from line 44, col 107.
            write("','")
            _v = VFFSL(SL,"rel",True) # $rel
            if _v is not None: write(_filter(_v, rawExpr='$rel')) # from line 44, col 118.
            write("','")
            _v = VFFSL(SL,"name",True) # $name
            if _v is not None: write(_filter(_v, rawExpr='$name')) # from line 44, col 125.
            write('\')" /></td>\n</tr>\n')
        write('</table>\n')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    def __str__(self): return self.respond()

    _mainCheetahMethod_for_templateAppConfigs= 'respond'
if not hasattr(templateAppConfigs, '_initCheetahAttributes'):
    templateClass = getattr(templateAppConfigs, '_CHEETAH_templateClass', Template)
    templateClass._assignRequiredMethodsToClass(templateAppConfigs)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=templateAppConfigs()).run()


