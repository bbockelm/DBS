##################################################
# file: NVWebServiceService_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    ./wsdl2py nvservice.wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# http://service.web.gov.fnal/
##############################

class ns0:
    targetNamespace = "http://service.web.gov.fnal/"

    class validateWS_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://service.web.gov.fnal/"
        type = (schema, "validateWS")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.validateWS_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._type = None
                    return
            Holder.__name__ = "validateWS_Holder"
            self.pyclass = Holder

    class validateWSResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://service.web.gov.fnal/"
        type = (schema, "validateWSResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.validateWSResponse_Def.schema
            TClist = [GTD("http://service.web.gov.fnal/","nameObject",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "validateWSResponse_Holder"
            self.pyclass = Holder

    class nameObject_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://service.web.gov.fnal/"
        type = (schema, "nameObject")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.nameObject_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="similar", aname="_similar", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._similar = None
                    return
            Holder.__name__ = "nameObject_Holder"
            self.pyclass = Holder

    class Exception_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://service.web.gov.fnal/"
        type = (schema, "Exception")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Exception_Def.schema
            TClist = [ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._message = None
                    return
            Holder.__name__ = "Exception_Holder"
            self.pyclass = Holder

    class Exception_Dec(ElementDeclaration):
        literal = "Exception"
        schema = "http://service.web.gov.fnal/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://service.web.gov.fnal/","Exception")
            kw["aname"] = "_Exception"
            if ns0.Exception_Def not in ns0.Exception_Dec.__bases__:
                bases = list(ns0.Exception_Dec.__bases__)
                bases.insert(0, ns0.Exception_Def)
                ns0.Exception_Dec.__bases__ = tuple(bases)

            ns0.Exception_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "Exception_Dec_Holder"

    class validateWS_Dec(ElementDeclaration):
        literal = "validateWS"
        schema = "http://service.web.gov.fnal/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://service.web.gov.fnal/","validateWS")
            kw["aname"] = "_validateWS"
            if ns0.validateWS_Def not in ns0.validateWS_Dec.__bases__:
                bases = list(ns0.validateWS_Dec.__bases__)
                bases.insert(0, ns0.validateWS_Def)
                ns0.validateWS_Dec.__bases__ = tuple(bases)

            ns0.validateWS_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "validateWS_Dec_Holder"

    class validateWSResponse_Dec(ElementDeclaration):
        literal = "validateWSResponse"
        schema = "http://service.web.gov.fnal/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://service.web.gov.fnal/","validateWSResponse")
            kw["aname"] = "_validateWSResponse"
            if ns0.validateWSResponse_Def not in ns0.validateWSResponse_Dec.__bases__:
                bases = list(ns0.validateWSResponse_Dec.__bases__)
                bases.insert(0, ns0.validateWSResponse_Def)
                ns0.validateWSResponse_Dec.__bases__ = tuple(bases)

            ns0.validateWSResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "validateWSResponse_Dec_Holder"

# end class ns0 (tns: http://service.web.gov.fnal/)
