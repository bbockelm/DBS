#!/bin/sh

##H This script modifies the Oracle Instant Client installation kit
##H such that it is easily used with PhEDEx, and in particular the
##H perl modules we require (DBD::Oracle).  It modifies the install
##H directory layout to resemble that of the real Oracle client
##H installation.
##H
##H The script leaves behind an environment configuration script
##H you can source to get fully functional Oracle execution and
##H build environment.
##H
##H Usage: InstallOracleClient ZIP-DIRECTORY DESTINATION [SCHEMA]
##H
##H ZIP-DIRECTORY specifies the directory in which three Oracle
##H zip files must be available; you can obtain these from the
##H otn.oracle.com (Download -> Oracle Instant Client -> Instant
##H Client for Linux x86 -> Read and agree to the license -> Sign
##H up for an OTN account or use existing one -> Save file):
##H   instantclient-basic-linux32-10.1.0.3.zip
##H   instantclient-sqlplus-linux32-10.1.0.3.zip
##H   instantclient-sdk-linux32-10.1.0.3.zip
##H
##H DESTINATION is the directory under which you want to install the
##H Oracle components.  You will get the standard Oracle installation
##H tree (lib, bin, admin, java, ...) directory structure here.
##H
##H SCHEMA is PHEDEX/Schema directory: your CVS checkout area.  By
##H default the schema directory is located relative to this script.

# Check required utlities.  Not all SL3 systems have all RPMs.
(unzip -h | grep Info-ZIP) >/dev/null 2>&1 ||
  { echo "unzip: required tool not available"; exit 3; }

# Check command line arguments
if [ $# -lt 2 -o $# -gt 3 ]; then
  grep '^##H' $0 | sed 's/^##H\( \|\)//'
  exit 1
fi

zipdir="$1" destdir="$2" schemadir="$3"
[ -d "$zipdir" ] || { echo "$zipdir: not a directory" 1>&2; exit 1; }
[ -d "$destdir" ] || mkdir -p "$destdir" ||
  { echo "$destdir: not a directory and could not create" 1>&2; exit 1; }
[ -z "$schemadir" ] && schemadir="$(dirname $0)/../Schema"
[ -f "$schemadir/tnsnames.ora" ] ||
  { echo "$schemadir/tnsnames.ora: no such file" 1>&2; exit 1; }

# Locate input zip files and check they are something we can use
basiczip= sqlzip= sdkzip=
for f in $zipdir/instantclient-*.zip; do
  case $f in
    */instantclient-basic-*-10.1.*.zip ) basiczip="$f" ;;
    */instantclient-sqlplus-*-10.1.*.zip ) sqlzip="$f" ;;
    */instantclient-sdk-*-10.1.*.zip ) sdkzip="$f" ;;
  esac
done

[ -z "$basiczip" ] && { echo "$zipdir: no 'basic' zip" 1>&2; exit 2; }
[ -z "$sqlzip" ] && { echo "$zipdir: no 'sqlplus' zip" 1>&2; exit 2; }
[ -z "$sdkzip" ] && { echo "$zipdir: no 'sdk' zip" 1>&2; exit 2; }

(unzip -v "$basiczip" | grep /libclntsh) >/dev/null 2>&1 ||
  { echo "$basiczip: unexpected contents, check the file was correctly downloaded" 1>&2; exit 3; }
(unzip -v "$sqlzip" | grep /sqlplus) >/dev/null 2>&1 ||
  { echo "$sqlzip: unexpected contents, check the file was correctly downloaded" 1>&2; exit 3; }
(unzip -v "$sdkzip" | grep /demo/demo.mk) >/dev/null 2>&1 ||
  { echo "$sdkzip: unexpected contents, check the file was correctly downloaded" 1>&2; exit 3; }

# Bon, we are ready to proceed.
tmpdir="$destdir/tmp.install.$$"
trap 's=$?; rm -fr "$tmpdir"; exit $?' 0 1 2 15
mkdir -p "$tmpdir" || exit $?
unzip -d "$tmpdir" $basiczip || exit $?
unzip -d "$tmpdir" $sqlzip || exit $?
unzip -d "$tmpdir" $sdkzip || exit $?

[ -d "$tmpdir/instantclient10_1" ] ||
  { echo "$tmpdir: expanding zips did not create 'instantclient10_1' subdirectory" 1>&2; exit 5; }

(cd "$tmpdir/instantclient10_1"; ln -s libclntsh.* $(echo libclntsh.* | sed 's/[0-9.]*$//'))
mkdir -p "$destdir/bin" \
         "$destdir/lib" \
	 "$destdir/admin" \
	 "$destdir/java" \
	 "$destdir/demo" \
	 "$destdir/include" || exit $?
mv "$tmpdir/instantclient10_1"/lib* "$destdir/lib" || exit $?
mv "$tmpdir/instantclient10_1"/sqlplus "$destdir/bin" || exit $?
mv "$tmpdir/instantclient10_1"/glogin.sql "$destdir/bin" || exit $?
mv "$tmpdir/instantclient10_1"/*.jar "$destdir/java" || exit $?
mv "$tmpdir/instantclient10_1"/sdk/demo/* "$destdir/demo" || exit $?
mv "$tmpdir/instantclient10_1"/sdk/include/* "$destdir/include" || exit $?
cp "$schemadir/tnsnames.ora" "$destdir/admin" || exit $?

case $(uname) in
  Darwin ) rpath=DYLD_LIBRARY_PATH ;;
  *      ) rpath=LD_LIBRARY_PATH ;;
esac

cat > "$destdir/oraenv.sh" <<EOF
ORACLE_HOME=$destdir;
PATH=$destdir/bin:\$PATH;
$rpath=$destdir/lib\${$rpath+:\$$rpath};
SQLPATH=$destdir/bin;
TNS_ADMIN=$destdir/admin;
export ORACLE_HOME PATH $rpath SQLPATH TNS_ADMIN;
EOF
