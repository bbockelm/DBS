#include "Communicate.hpp"
#include <iostream>
#include <string>

using namespace std;

Communicate::Communicate(GSS * g) { 
	this->g = g;
}
Communicate::~Communicate(){}


/*void Communicate::send(string message) {

	int len = message.length();
	if(len < MAX_MESSAGE_LEN) {
		cout<<"Sending "<<message<<endl;
		g->send(message);
		cout<<"DONE"<<endl;
		g->send("DONE");
		return;
	}
	int index = 0;
	while( index < len ) {
		cout<<"Sending "<<message.substr(index, MAX_MESSAGE_LEN)<<endl;
		//cout<<"index "<<index<<" len  "<<len<<" index + MAX_MESSAGE_LEN "<<(index+MAX_MESSAGE_LEN)<<endl;
		g->send(message.substr(index, MAX_MESSAGE_LEN));
		index += MAX_MESSAGE_LEN;
	}
	cout<<"DONE"<<endl;
	g->send("DONE");
}

void Communicate::recv(string& message) {
	string temp;
	while ( (temp = g->recv() ) != "DONE" ) {
		cout<<"Recvd "<<temp<<endl;
		message += temp;
	}
	//cout<<"Recvd is "<<message<<endl;
}
*/
void Communicate::send(Message & m) {
	/*for(int i = 0 ; i != 5000; ++i ) {
		cout<<"sending skdhfsahdf;asdhfs;jhfjklshf;sadhfjksdhf;asdjfhdsjskahf;sdafhskdhfjkshfdslhflskdhfabhfbj"<<endl;
		g->send("skdhfsahdf;asdhfs;jhfjklshf;sadhfjksdhf;asdjfhdsjskahf;sdafhskdhfjkshfdslhflskdhfabhfbj");
	}
	g->send("DONE");*/

	//string message = m.serialize();
	string message;
	m.serialize(message);
	int len = message.length();
	if(len < MAX_MESSAGE_LEN) {
		cout<<"Sending "<<message<<endl;
		g->send(message);
		cout<<"DONE"<<endl;
		g->send("DONE");
		return;
	}
	int index = 0;
	while( index < len ) {
		cout<<"Sending "<<message.substr(index, MAX_MESSAGE_LEN)<<endl;
		//cout<<"index "<<index<<" len  "<<len<<" index + MAX_MESSAGE_LEN "<<(index+MAX_MESSAGE_LEN)<<endl;
		g->send(message.substr(index, MAX_MESSAGE_LEN));
		index += MAX_MESSAGE_LEN;
	}
	cout<<"DONE"<<endl;
	g->send("DONE");
}

void Communicate::recv(Message & m) {
	/*string message = "";
	string temp;
	while ( (temp = g->recv() ) != "DONE" ) {
		cout<<"Recvd "<<temp<<endl;
		message += temp;
	}*/

	string message = "";
	string temp;
	while ( (temp = g->recv() ) != "DONE" ) {
		cout<<"Recvd "<<temp<<endl;
		message += temp;
	}
	//cout<<"Recvd is "<<message<<endl;
	m.deserialize(message);
        cout << "Communicate::recv  Looking for Message Name" <<endl;
        cout << "Communicate::recv" << m.getName() << endl;

}


/*int main() {
	Communicate m;
	m.setName("Myname");
	Element e1("k1","v1","t1");
	Element e2("k2","v2","t2");
	Element e3("k3","v3","t3");
	m.addElement(e1);
	m.addElement(e2);
	string Communicate = m.serialize();
	cout<<"Serialized Communicate is \n"<<Communicate<<endl;
	cout<<"deserialize returned  "<<m.deserialize(Communicate)<<endl;
	
	m.addElement(e3);
	Communicate = m.serialize();
	cout<<"Again Serialized Communicate is \n"<<Communicate<<endl;
}*/
