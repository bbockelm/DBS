#!/usr/bin/env python
#
# $Id: dbsXmlParser.py,v 1.2 2005/10/27 19:47:46 sveseli Exp $
#
# Base class for parsing xml files generated by phedex or other utilities.
#

import string
import dbsException
import dbsLogManager

from xml.dom.minidom import parseString
from xml.parsers.expat import ExpatError

DEFAULT_STRING_ENCODING_ = "ascii"


##############################################################################
# Exception classes.

class DbsXmlParserException(dbsException.DbsException):

  def __init__ (self, **kwargs):
    """ Initialization. """
    dbsException.DbsException.__init__(self, **kwargs)

class InvalidInputXmlFile(DbsXmlParserException):

  def __init__ (self, **kwargs):
    """ Initialization. """
    DbsXmlParserException.__init__(self, **kwargs)

class InvalidXmlInput(DbsXmlParserException):

  def __init__ (self, **kwargs):
    """ Initialization. """
    DbsXmlParserException.__init__(self, **kwargs)

##############################################################################
# Parser class.

class DbsXmlParser:

  def __init__(self, xmlString=None, xmlFile=None):
    """ Constructor. """
    funcName = "%s.%s" % (self.__class__.__name__, "__init__()")
    logManager = dbsLogManager.getInstance()

    self._xmlString = xmlString
    if xmlString == None and xmlFile != None:
      try:	
	self._xmlString = open(xmlFile).read()
      except IOError, ex: 
	logManager.log(
	  what="Could not open file %s: %s" % (xmlFile, ex),
	  where=funcName,
	  logLevel=dbsLogManager.LOG_LEVEL_ERROR_)
	raise InvalidInputXmlFile(exception=ex)
    if self._xmlString == None:
      errMsg = "Invalid XML input provided."
      logManager.log(
	what=errMsg,
	where=funcName,
	logLevel=dbsLogManager.LOG_LEVEL_ERROR_)
      raise InvalidXmlInput(args=errMsg)
      
    try:
      self._dom = parseString(self._xmlString)
      logManager.log(
	what="Successfully parsed xml.",
	where=funcName,
	logLevel=dbsLogManager.LOG_LEVEL_DEBUG_)
    except ExpatError, ex:
      logManager.log(
	what="Could not parse xml: %s\nInput string: %s" % (ex, xmlString),
	where=funcName,
	logLevel=dbsLogManager.LOG_LEVEL_ERROR_)
      raise InvalidXmlInput(exception=ex)
    except Exception, ex:
      logManager.log(
	what="Could not parse xml: %s" % (ex),
	where=funcName,
	logLevel=dbsLogManager.LOG_LEVEL_ERROR_)
      raise DbsXmlParserException(exception=ex)

  def getDom(self):
    """ Return dom object. """
    return self._dom

  def getXmlString(self):
    """ Return xml string. """
    return self._xmlString
  
  def parseDocument(self):
    """
    Process the document tree. The derived parser classes have to implement
    this method.
    """
    raise dbsException.MethodNotImplemented(args="This method should be overridden in the derived DBS XML parser class.")


##############################################################################
# Unit testing.

if __name__ == "__main__":
  try:
    parser = DbsXmlParser("tmpFile.10134.1129745508.25.xml")
  except dbsException.DbsException, ex:  
    print "Caught exception %s: %s" % (ex.getClassName(), ex.getErrorMessage())
  print "Done"
