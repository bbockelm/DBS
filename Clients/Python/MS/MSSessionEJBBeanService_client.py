##################################################
# file: MSSessionEJBBeanService_client.py
# 
# client stubs generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#     ./wsdl2py MSSessionEJB.wsdl
# 
##################################################

from MSSessionEJBBeanService_types import *
import urlparse, types
from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
from ZSI.schema import GED, GTD
import ZSI

# Locator
class MSSessionEJBBeanServiceLocator:
    #MSSessionEJBBeanPort_address = "http://plasma.dhcp.fnal.gov:8080/ms-msejb/MSSessionEJB"
    #MSSessionEJBBeanPort_address = "http://cmssrv48.fnal.gov:8585/ms-msejb/MSSessionEJB"
    MSSessionEJBBeanPort_address = "http://vocms25.cern.ch:8080/ms-msejb/MSSessionEJB"
    def getMSSessionEJBBeanPortAddress(self):
        return MSSessionEJBBeanServiceLocator.MSSessionEJBBeanPort_address
    def getMSSessionEJBBeanPort(self, url=None, **kw):
        return MSSessionEJBWSBindingSOAP(url or MSSessionEJBBeanServiceLocator.MSSessionEJBBeanPort_address, **kw)

# Methods
class MSSessionEJBWSBindingSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: addRequest
    def addRequest(self, request, **kw):
        if isinstance(request, MSSessionEJBWS_addRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(MSSessionEJBWS_addRequestResponse.typecode)
        return response

    # op: deleteRequest
    def deleteRequest(self, request, **kw):
        if isinstance(request, MSSessionEJBWS_deleteRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(MSSessionEJBWS_deleteRequestResponse.typecode)
        return response

    # op: getRequestById
    def getRequestById(self, request, **kw):
        if isinstance(request, MSSessionEJBWS_getRequestById) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(MSSessionEJBWS_getRequestByIdResponse.typecode)
        return response

    # op: getRequestByStatus
    def getRequestByStatus(self, request, **kw):
        if isinstance(request, MSSessionEJBWS_getRequestByStatus) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(MSSessionEJBWS_getRequestByStatusResponse.typecode)
        return response

    # op: getRequestByUser
    def getRequestByUser(self, request, **kw):
        if isinstance(request, MSSessionEJBWS_getRequestByUser) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(MSSessionEJBWS_getRequestByUserResponse.typecode)
        return response

MSSessionEJBWS_addRequest = GED("http://session.ejb.gov.fnal/", "addRequest").pyclass

MSSessionEJBWS_addRequestResponse = GED("http://session.ejb.gov.fnal/", "addRequestResponse").pyclass

MSSessionEJBWS_deleteRequest = GED("http://session.ejb.gov.fnal/", "deleteRequest").pyclass

MSSessionEJBWS_deleteRequestResponse = GED("http://session.ejb.gov.fnal/", "deleteRequestResponse").pyclass

MSSessionEJBWS_getRequestById = GED("http://session.ejb.gov.fnal/", "getRequestById").pyclass

MSSessionEJBWS_getRequestByIdResponse = GED("http://session.ejb.gov.fnal/", "getRequestByIdResponse").pyclass

MSSessionEJBWS_getRequestByStatus = GED("http://session.ejb.gov.fnal/", "getRequestByStatus").pyclass

MSSessionEJBWS_getRequestByStatusResponse = GED("http://session.ejb.gov.fnal/", "getRequestByStatusResponse").pyclass

MSSessionEJBWS_getRequestByUser = GED("http://session.ejb.gov.fnal/", "getRequestByUser").pyclass

MSSessionEJBWS_getRequestByUserResponse = GED("http://session.ejb.gov.fnal/", "getRequestByUserResponse").pyclass
"""
stub = MSSessionEJBBeanServiceLocator().getMSSessionEJBBeanPort()
toPass = MSSessionEJBWS_getRequestByUser()
toPass._dn = 'vijay'
result =  stub.getRequestByUser(toPass)._return
for req in result:
	print 'detail   : ' + req._detail
	print 'dstUrl   : ' + req._dstUrl._url
	print 'id       : ' + str(req._id)
	print 'notify   : ' + req._notify
	print 'path     : ' + req._path
	print 'dn       : ' + req._person._distinguishedName
	print 'progress : ' + str(req._progress)
	print 'srcUrl   : ' + req._srcUrl._url
	print 'status   : ' + req._status
	print 'force    : ' + req._withForce
	print 'parents  : ' + req._withParents
	print '--------------------------------------------------------------'
"""																										
