##################################################
# file: MSSessionEJBBeanService_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    /home/sekhri/zsi/ZSI-2.1-a1/scripts/wsdl2py MSSessionEJB.wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# http://session.dm.ms.fnal.gov/
##############################

class ns0:
    targetNamespace = "http://session.dm.ms.fnal.gov/"

    class getRequestById_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://session.dm.ms.fnal.gov/"
        type = (schema, "getRequestById")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getRequestById_Def.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="id", aname="_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    return
            Holder.__name__ = "getRequestById_Holder"
            self.pyclass = Holder

    class getRequestByIdResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://session.dm.ms.fnal.gov/"
        type = (schema, "getRequestByIdResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getRequestByIdResponse_Def.schema
            TClist = [GTD("http://session.dm.ms.fnal.gov/","request",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getRequestByIdResponse_Holder"
            self.pyclass = Holder

    class request_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://session.dm.ms.fnal.gov/"
        type = (schema, "request")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.request_Def.schema
            TClist = [ZSI.TC.String(pname="detail", aname="_detail", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://session.dm.ms.fnal.gov/","dbsurl",lazy=False)(pname="dstUrl", aname="_dstUrl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="id", aname="_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="notify", aname="_notify", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="path", aname="_path", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://session.dm.ms.fnal.gov/","person",lazy=False)(pname="person", aname="_person", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="progress", aname="_progress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://session.dm.ms.fnal.gov/","dbsurl",lazy=False)(pname="srcUrl", aname="_srcUrl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="status", aname="_status", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="withForce", aname="_withForce", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="withParents", aname="_withParents", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._detail = None
                    self._dstUrl = None
                    self._id = None
                    self._notify = None
                    self._path = None
                    self._person = None
                    self._progress = None
                    self._srcUrl = None
                    self._status = None
                    self._withForce = None
                    self._withParents = None
                    return
            Holder.__name__ = "request_Holder"
            self.pyclass = Holder

    class dbsurl_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://session.dm.ms.fnal.gov/"
        type = (schema, "dbsurl")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.dbsurl_Def.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="id", aname="_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="url", aname="_url", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._url = None
                    return
            Holder.__name__ = "dbsurl_Holder"
            self.pyclass = Holder

    class person_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://session.dm.ms.fnal.gov/"
        type = (schema, "person")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.person_Def.schema
            TClist = [ZSI.TC.String(pname="distinguishedName", aname="_distinguishedName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="id", aname="_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._distinguishedName = None
                    self._id = None
                    return
            Holder.__name__ = "person_Holder"
            self.pyclass = Holder

    class Exception_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://session.dm.ms.fnal.gov/"
        type = (schema, "Exception")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Exception_Def.schema
            TClist = [ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._message = None
                    return
            Holder.__name__ = "Exception_Holder"
            self.pyclass = Holder

    class getRequestByUser_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://session.dm.ms.fnal.gov/"
        type = (schema, "getRequestByUser")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getRequestByUser_Def.schema
            TClist = [ZSI.TC.String(pname="dn", aname="_dn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._dn = None
                    return
            Holder.__name__ = "getRequestByUser_Holder"
            self.pyclass = Holder

    class getRequestByUserResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://session.dm.ms.fnal.gov/"
        type = (schema, "getRequestByUserResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getRequestByUserResponse_Def.schema
            TClist = [GTD("http://session.dm.ms.fnal.gov/","request",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getRequestByUserResponse_Holder"
            self.pyclass = Holder

    class getRequestByStatus_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://session.dm.ms.fnal.gov/"
        type = (schema, "getRequestByStatus")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getRequestByStatus_Def.schema
            TClist = [ZSI.TC.String(pname="status", aname="_status", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._status = None
                    return
            Holder.__name__ = "getRequestByStatus_Holder"
            self.pyclass = Holder

    class getRequestByStatusResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://session.dm.ms.fnal.gov/"
        type = (schema, "getRequestByStatusResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getRequestByStatusResponse_Def.schema
            TClist = [GTD("http://session.dm.ms.fnal.gov/","request",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getRequestByStatusResponse_Holder"
            self.pyclass = Holder

    class deleteRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://session.dm.ms.fnal.gov/"
        type = (schema, "deleteRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.deleteRequest_Def.schema
            TClist = [ZSI.TC.String(pname="srcUrl", aname="_srcUrl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dstUrl", aname="_dstUrl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="path", aname="_path", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._srcUrl = None
                    self._dstUrl = None
                    self._path = None
                    return
            Holder.__name__ = "deleteRequest_Holder"
            self.pyclass = Holder

    class deleteRequestResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://session.dm.ms.fnal.gov/"
        type = (schema, "deleteRequestResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.deleteRequestResponse_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "deleteRequestResponse_Holder"
            self.pyclass = Holder

    class addRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://session.dm.ms.fnal.gov/"
        type = (schema, "addRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.addRequest_Def.schema
            TClist = [ZSI.TC.String(pname="srcUrl", aname="_srcUrl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dstUrl", aname="_dstUrl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="path", aname="_path", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dn", aname="_dn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="withParents", aname="_withParents", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="withForce", aname="_withForce", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="notify", aname="_notify", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._srcUrl = None
                    self._dstUrl = None
                    self._path = None
                    self._dn = None
                    self._withParents = None
                    self._withForce = None
                    self._notify = None
                    return
            Holder.__name__ = "addRequest_Holder"
            self.pyclass = Holder

    class addRequestResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://session.dm.ms.fnal.gov/"
        type = (schema, "addRequestResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.addRequestResponse_Def.schema
            TClist = [GTD("http://session.dm.ms.fnal.gov/","request",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "addRequestResponse_Holder"
            self.pyclass = Holder

    class Exception_Dec(ElementDeclaration):
        literal = "Exception"
        schema = "http://session.dm.ms.fnal.gov/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://session.dm.ms.fnal.gov/","Exception")
            kw["aname"] = "_Exception"
            if ns0.Exception_Def not in ns0.Exception_Dec.__bases__:
                bases = list(ns0.Exception_Dec.__bases__)
                bases.insert(0, ns0.Exception_Def)
                ns0.Exception_Dec.__bases__ = tuple(bases)

            ns0.Exception_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "Exception_Dec_Holder"

    class addRequest_Dec(ElementDeclaration):
        literal = "addRequest"
        schema = "http://session.dm.ms.fnal.gov/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://session.dm.ms.fnal.gov/","addRequest")
            kw["aname"] = "_addRequest"
            if ns0.addRequest_Def not in ns0.addRequest_Dec.__bases__:
                bases = list(ns0.addRequest_Dec.__bases__)
                bases.insert(0, ns0.addRequest_Def)
                ns0.addRequest_Dec.__bases__ = tuple(bases)

            ns0.addRequest_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "addRequest_Dec_Holder"

    class addRequestResponse_Dec(ElementDeclaration):
        literal = "addRequestResponse"
        schema = "http://session.dm.ms.fnal.gov/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://session.dm.ms.fnal.gov/","addRequestResponse")
            kw["aname"] = "_addRequestResponse"
            if ns0.addRequestResponse_Def not in ns0.addRequestResponse_Dec.__bases__:
                bases = list(ns0.addRequestResponse_Dec.__bases__)
                bases.insert(0, ns0.addRequestResponse_Def)
                ns0.addRequestResponse_Dec.__bases__ = tuple(bases)

            ns0.addRequestResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "addRequestResponse_Dec_Holder"

    class deleteRequest_Dec(ElementDeclaration):
        literal = "deleteRequest"
        schema = "http://session.dm.ms.fnal.gov/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://session.dm.ms.fnal.gov/","deleteRequest")
            kw["aname"] = "_deleteRequest"
            if ns0.deleteRequest_Def not in ns0.deleteRequest_Dec.__bases__:
                bases = list(ns0.deleteRequest_Dec.__bases__)
                bases.insert(0, ns0.deleteRequest_Def)
                ns0.deleteRequest_Dec.__bases__ = tuple(bases)

            ns0.deleteRequest_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "deleteRequest_Dec_Holder"

    class deleteRequestResponse_Dec(ElementDeclaration):
        literal = "deleteRequestResponse"
        schema = "http://session.dm.ms.fnal.gov/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://session.dm.ms.fnal.gov/","deleteRequestResponse")
            kw["aname"] = "_deleteRequestResponse"
            if ns0.deleteRequestResponse_Def not in ns0.deleteRequestResponse_Dec.__bases__:
                bases = list(ns0.deleteRequestResponse_Dec.__bases__)
                bases.insert(0, ns0.deleteRequestResponse_Def)
                ns0.deleteRequestResponse_Dec.__bases__ = tuple(bases)

            ns0.deleteRequestResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "deleteRequestResponse_Dec_Holder"

    class getRequestById_Dec(ElementDeclaration):
        literal = "getRequestById"
        schema = "http://session.dm.ms.fnal.gov/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://session.dm.ms.fnal.gov/","getRequestById")
            kw["aname"] = "_getRequestById"
            if ns0.getRequestById_Def not in ns0.getRequestById_Dec.__bases__:
                bases = list(ns0.getRequestById_Dec.__bases__)
                bases.insert(0, ns0.getRequestById_Def)
                ns0.getRequestById_Dec.__bases__ = tuple(bases)

            ns0.getRequestById_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getRequestById_Dec_Holder"

    class getRequestByIdResponse_Dec(ElementDeclaration):
        literal = "getRequestByIdResponse"
        schema = "http://session.dm.ms.fnal.gov/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://session.dm.ms.fnal.gov/","getRequestByIdResponse")
            kw["aname"] = "_getRequestByIdResponse"
            if ns0.getRequestByIdResponse_Def not in ns0.getRequestByIdResponse_Dec.__bases__:
                bases = list(ns0.getRequestByIdResponse_Dec.__bases__)
                bases.insert(0, ns0.getRequestByIdResponse_Def)
                ns0.getRequestByIdResponse_Dec.__bases__ = tuple(bases)

            ns0.getRequestByIdResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getRequestByIdResponse_Dec_Holder"

    class getRequestByStatus_Dec(ElementDeclaration):
        literal = "getRequestByStatus"
        schema = "http://session.dm.ms.fnal.gov/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://session.dm.ms.fnal.gov/","getRequestByStatus")
            kw["aname"] = "_getRequestByStatus"
            if ns0.getRequestByStatus_Def not in ns0.getRequestByStatus_Dec.__bases__:
                bases = list(ns0.getRequestByStatus_Dec.__bases__)
                bases.insert(0, ns0.getRequestByStatus_Def)
                ns0.getRequestByStatus_Dec.__bases__ = tuple(bases)

            ns0.getRequestByStatus_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getRequestByStatus_Dec_Holder"

    class getRequestByStatusResponse_Dec(ElementDeclaration):
        literal = "getRequestByStatusResponse"
        schema = "http://session.dm.ms.fnal.gov/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://session.dm.ms.fnal.gov/","getRequestByStatusResponse")
            kw["aname"] = "_getRequestByStatusResponse"
            if ns0.getRequestByStatusResponse_Def not in ns0.getRequestByStatusResponse_Dec.__bases__:
                bases = list(ns0.getRequestByStatusResponse_Dec.__bases__)
                bases.insert(0, ns0.getRequestByStatusResponse_Def)
                ns0.getRequestByStatusResponse_Dec.__bases__ = tuple(bases)

            ns0.getRequestByStatusResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getRequestByStatusResponse_Dec_Holder"

    class getRequestByUser_Dec(ElementDeclaration):
        literal = "getRequestByUser"
        schema = "http://session.dm.ms.fnal.gov/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://session.dm.ms.fnal.gov/","getRequestByUser")
            kw["aname"] = "_getRequestByUser"
            if ns0.getRequestByUser_Def not in ns0.getRequestByUser_Dec.__bases__:
                bases = list(ns0.getRequestByUser_Dec.__bases__)
                bases.insert(0, ns0.getRequestByUser_Def)
                ns0.getRequestByUser_Dec.__bases__ = tuple(bases)

            ns0.getRequestByUser_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getRequestByUser_Dec_Holder"

    class getRequestByUserResponse_Dec(ElementDeclaration):
        literal = "getRequestByUserResponse"
        schema = "http://session.dm.ms.fnal.gov/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://session.dm.ms.fnal.gov/","getRequestByUserResponse")
            kw["aname"] = "_getRequestByUserResponse"
            if ns0.getRequestByUserResponse_Def not in ns0.getRequestByUserResponse_Dec.__bases__:
                bases = list(ns0.getRequestByUserResponse_Dec.__bases__)
                bases.insert(0, ns0.getRequestByUserResponse_Def)
                ns0.getRequestByUserResponse_Dec.__bases__ = tuple(bases)

            ns0.getRequestByUserResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getRequestByUserResponse_Dec_Holder"

# end class ns0 (tns: http://session.dm.ms.fnal.gov/)
