##################################################
# file: RSSessionEJBBeanService_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    ./wsdl2py RSSessionEJB.wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# http://session.dm.rs.fnal.gov/
##############################

class ns0:
    targetNamespace = "http://session.dm.rs.fnal.gov/"

    class queryRegistrationFindByAlias_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://session.dm.rs.fnal.gov/"
        type = (schema, "queryRegistrationFindByAlias")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.queryRegistrationFindByAlias_Def.schema
            TClist = [ZSI.TC.AnyType(pname="alias", aname="_alias", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._alias = None
                    return
            Holder.__name__ = "queryRegistrationFindByAlias_Holder"
            self.pyclass = Holder

    class queryRegistrationFindByAliasResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://session.dm.rs.fnal.gov/"
        type = (schema, "queryRegistrationFindByAliasResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.queryRegistrationFindByAliasResponse_Def.schema
            TClist = [GTD("http://session.dm.rs.fnal.gov/","registration",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "queryRegistrationFindByAliasResponse_Holder"
            self.pyclass = Holder

    class registration_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://session.dm.rs.fnal.gov/"
        type = (schema, "registration")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.registration_Def.schema
            TClist = [ZSI.TC.String(pname="accountName", aname="_accountName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="alias", aname="_alias", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="creationDate", aname="_creationDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="critical", aname="_critical", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dbName", aname="_dbName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="dbPort", aname="_dbPort", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="id", aname="_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="lastModificationDate", aname="_lastModificationDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="nodeName", aname="_nodeName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://session.dm.rs.fnal.gov/","person",lazy=False)(pname="person", aname="_person", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="physicalLocation", aname="_physicalLocation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="schemaVersion", aname="_schemaVersion", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="serverVersion", aname="_serverVersion", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="status", aname="_status", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="url", aname="_url", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._accountName = None
                    self._alias = None
                    self._creationDate = None
                    self._critical = None
                    self._dbName = None
                    self._dbPort = None
                    self._id = None
                    self._lastModificationDate = None
                    self._nodeName = None
                    self._person = None
                    self._physicalLocation = None
                    self._schemaVersion = None
                    self._serverVersion = None
                    self._status = None
                    self._url = None
                    return
            Holder.__name__ = "registration_Holder"
            self.pyclass = Holder

    class person_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://session.dm.rs.fnal.gov/"
        type = (schema, "person")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.person_Def.schema
            TClist = [ZSI.TC.String(pname="contactInfo", aname="_contactInfo", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="createdBy", aname="_createdBy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="creationDate", aname="_creationDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="distinguishedName", aname="_distinguishedName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="id", aname="_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="lastModificationDate", aname="_lastModificationDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="lastModifiedBy", aname="_lastModifiedBy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._contactInfo = None
                    self._createdBy = None
                    self._creationDate = None
                    self._distinguishedName = None
                    self._id = None
                    self._lastModificationDate = None
                    self._lastModifiedBy = None
                    self._name = None
                    return
            Holder.__name__ = "person_Holder"
            self.pyclass = Holder

    class Exception_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://session.dm.rs.fnal.gov/"
        type = (schema, "Exception")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Exception_Def.schema
            TClist = [ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._message = None
                    return
            Holder.__name__ = "Exception_Holder"
            self.pyclass = Holder

    class queryRegistrationFindByURL_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://session.dm.rs.fnal.gov/"
        type = (schema, "queryRegistrationFindByURL")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.queryRegistrationFindByURL_Def.schema
            TClist = [ZSI.TC.AnyType(pname="url", aname="_url", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._url = None
                    return
            Holder.__name__ = "queryRegistrationFindByURL_Holder"
            self.pyclass = Holder

    class queryRegistrationFindByURLResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://session.dm.rs.fnal.gov/"
        type = (schema, "queryRegistrationFindByURLResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.queryRegistrationFindByURLResponse_Def.schema
            TClist = [GTD("http://session.dm.rs.fnal.gov/","registration",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "queryRegistrationFindByURLResponse_Holder"
            self.pyclass = Holder

    class queryRegistrationFindAll_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://session.dm.rs.fnal.gov/"
        type = (schema, "queryRegistrationFindAll")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.queryRegistrationFindAll_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "queryRegistrationFindAll_Holder"
            self.pyclass = Holder

    class queryRegistrationFindAllResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://session.dm.rs.fnal.gov/"
        type = (schema, "queryRegistrationFindAllResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.queryRegistrationFindAllResponse_Def.schema
            TClist = [GTD("http://session.dm.rs.fnal.gov/","registration",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "queryRegistrationFindAllResponse_Holder"
            self.pyclass = Holder

    class removeRegistration_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://session.dm.rs.fnal.gov/"
        type = (schema, "removeRegistration")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.removeRegistration_Def.schema
            TClist = [GTD("http://session.dm.rs.fnal.gov/","registration",lazy=False)(pname="registration", aname="_registration", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._registration = None
                    return
            Holder.__name__ = "removeRegistration_Holder"
            self.pyclass = Holder

    class removeRegistrationResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://session.dm.rs.fnal.gov/"
        type = (schema, "removeRegistrationResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.removeRegistrationResponse_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "removeRegistrationResponse_Holder"
            self.pyclass = Holder

    class addRegistration_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://session.dm.rs.fnal.gov/"
        type = (schema, "addRegistration")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.addRegistration_Def.schema
            TClist = [GTD("http://session.dm.rs.fnal.gov/","registration",lazy=False)(pname="rIn", aname="_rIn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rIn = None
                    return
            Holder.__name__ = "addRegistration_Holder"
            self.pyclass = Holder

    class addRegistrationResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://session.dm.rs.fnal.gov/"
        type = (schema, "addRegistrationResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.addRegistrationResponse_Def.schema
            TClist = [GTD("http://session.dm.rs.fnal.gov/","registration",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "addRegistrationResponse_Holder"
            self.pyclass = Holder

    class Exception_Dec(ElementDeclaration):
        literal = "Exception"
        schema = "http://session.dm.rs.fnal.gov/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://session.dm.rs.fnal.gov/","Exception")
            kw["aname"] = "_Exception"
            if ns0.Exception_Def not in ns0.Exception_Dec.__bases__:
                bases = list(ns0.Exception_Dec.__bases__)
                bases.insert(0, ns0.Exception_Def)
                ns0.Exception_Dec.__bases__ = tuple(bases)

            ns0.Exception_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "Exception_Dec_Holder"

    class addRegistration_Dec(ElementDeclaration):
        literal = "addRegistration"
        schema = "http://session.dm.rs.fnal.gov/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://session.dm.rs.fnal.gov/","addRegistration")
            kw["aname"] = "_addRegistration"
            if ns0.addRegistration_Def not in ns0.addRegistration_Dec.__bases__:
                bases = list(ns0.addRegistration_Dec.__bases__)
                bases.insert(0, ns0.addRegistration_Def)
                ns0.addRegistration_Dec.__bases__ = tuple(bases)

            ns0.addRegistration_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "addRegistration_Dec_Holder"

    class addRegistrationResponse_Dec(ElementDeclaration):
        literal = "addRegistrationResponse"
        schema = "http://session.dm.rs.fnal.gov/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://session.dm.rs.fnal.gov/","addRegistrationResponse")
            kw["aname"] = "_addRegistrationResponse"
            if ns0.addRegistrationResponse_Def not in ns0.addRegistrationResponse_Dec.__bases__:
                bases = list(ns0.addRegistrationResponse_Dec.__bases__)
                bases.insert(0, ns0.addRegistrationResponse_Def)
                ns0.addRegistrationResponse_Dec.__bases__ = tuple(bases)

            ns0.addRegistrationResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "addRegistrationResponse_Dec_Holder"

    class queryRegistrationFindAll_Dec(ElementDeclaration):
        literal = "queryRegistrationFindAll"
        schema = "http://session.dm.rs.fnal.gov/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://session.dm.rs.fnal.gov/","queryRegistrationFindAll")
            kw["aname"] = "_queryRegistrationFindAll"
            if ns0.queryRegistrationFindAll_Def not in ns0.queryRegistrationFindAll_Dec.__bases__:
                bases = list(ns0.queryRegistrationFindAll_Dec.__bases__)
                bases.insert(0, ns0.queryRegistrationFindAll_Def)
                ns0.queryRegistrationFindAll_Dec.__bases__ = tuple(bases)

            ns0.queryRegistrationFindAll_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "queryRegistrationFindAll_Dec_Holder"

    class queryRegistrationFindAllResponse_Dec(ElementDeclaration):
        literal = "queryRegistrationFindAllResponse"
        schema = "http://session.dm.rs.fnal.gov/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://session.dm.rs.fnal.gov/","queryRegistrationFindAllResponse")
            kw["aname"] = "_queryRegistrationFindAllResponse"
            if ns0.queryRegistrationFindAllResponse_Def not in ns0.queryRegistrationFindAllResponse_Dec.__bases__:
                bases = list(ns0.queryRegistrationFindAllResponse_Dec.__bases__)
                bases.insert(0, ns0.queryRegistrationFindAllResponse_Def)
                ns0.queryRegistrationFindAllResponse_Dec.__bases__ = tuple(bases)

            ns0.queryRegistrationFindAllResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "queryRegistrationFindAllResponse_Dec_Holder"

    class queryRegistrationFindByAlias_Dec(ElementDeclaration):
        literal = "queryRegistrationFindByAlias"
        schema = "http://session.dm.rs.fnal.gov/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://session.dm.rs.fnal.gov/","queryRegistrationFindByAlias")
            kw["aname"] = "_queryRegistrationFindByAlias"
            if ns0.queryRegistrationFindByAlias_Def not in ns0.queryRegistrationFindByAlias_Dec.__bases__:
                bases = list(ns0.queryRegistrationFindByAlias_Dec.__bases__)
                bases.insert(0, ns0.queryRegistrationFindByAlias_Def)
                ns0.queryRegistrationFindByAlias_Dec.__bases__ = tuple(bases)

            ns0.queryRegistrationFindByAlias_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "queryRegistrationFindByAlias_Dec_Holder"

    class queryRegistrationFindByAliasResponse_Dec(ElementDeclaration):
        literal = "queryRegistrationFindByAliasResponse"
        schema = "http://session.dm.rs.fnal.gov/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://session.dm.rs.fnal.gov/","queryRegistrationFindByAliasResponse")
            kw["aname"] = "_queryRegistrationFindByAliasResponse"
            if ns0.queryRegistrationFindByAliasResponse_Def not in ns0.queryRegistrationFindByAliasResponse_Dec.__bases__:
                bases = list(ns0.queryRegistrationFindByAliasResponse_Dec.__bases__)
                bases.insert(0, ns0.queryRegistrationFindByAliasResponse_Def)
                ns0.queryRegistrationFindByAliasResponse_Dec.__bases__ = tuple(bases)

            ns0.queryRegistrationFindByAliasResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "queryRegistrationFindByAliasResponse_Dec_Holder"

    class queryRegistrationFindByURL_Dec(ElementDeclaration):
        literal = "queryRegistrationFindByURL"
        schema = "http://session.dm.rs.fnal.gov/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://session.dm.rs.fnal.gov/","queryRegistrationFindByURL")
            kw["aname"] = "_queryRegistrationFindByURL"
            if ns0.queryRegistrationFindByURL_Def not in ns0.queryRegistrationFindByURL_Dec.__bases__:
                bases = list(ns0.queryRegistrationFindByURL_Dec.__bases__)
                bases.insert(0, ns0.queryRegistrationFindByURL_Def)
                ns0.queryRegistrationFindByURL_Dec.__bases__ = tuple(bases)

            ns0.queryRegistrationFindByURL_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "queryRegistrationFindByURL_Dec_Holder"

    class queryRegistrationFindByURLResponse_Dec(ElementDeclaration):
        literal = "queryRegistrationFindByURLResponse"
        schema = "http://session.dm.rs.fnal.gov/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://session.dm.rs.fnal.gov/","queryRegistrationFindByURLResponse")
            kw["aname"] = "_queryRegistrationFindByURLResponse"
            if ns0.queryRegistrationFindByURLResponse_Def not in ns0.queryRegistrationFindByURLResponse_Dec.__bases__:
                bases = list(ns0.queryRegistrationFindByURLResponse_Dec.__bases__)
                bases.insert(0, ns0.queryRegistrationFindByURLResponse_Def)
                ns0.queryRegistrationFindByURLResponse_Dec.__bases__ = tuple(bases)

            ns0.queryRegistrationFindByURLResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "queryRegistrationFindByURLResponse_Dec_Holder"

    class removeRegistration_Dec(ElementDeclaration):
        literal = "removeRegistration"
        schema = "http://session.dm.rs.fnal.gov/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://session.dm.rs.fnal.gov/","removeRegistration")
            kw["aname"] = "_removeRegistration"
            if ns0.removeRegistration_Def not in ns0.removeRegistration_Dec.__bases__:
                bases = list(ns0.removeRegistration_Dec.__bases__)
                bases.insert(0, ns0.removeRegistration_Def)
                ns0.removeRegistration_Dec.__bases__ = tuple(bases)

            ns0.removeRegistration_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "removeRegistration_Dec_Holder"

    class removeRegistrationResponse_Dec(ElementDeclaration):
        literal = "removeRegistrationResponse"
        schema = "http://session.dm.rs.fnal.gov/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://session.dm.rs.fnal.gov/","removeRegistrationResponse")
            kw["aname"] = "_removeRegistrationResponse"
            if ns0.removeRegistrationResponse_Def not in ns0.removeRegistrationResponse_Dec.__bases__:
                bases = list(ns0.removeRegistrationResponse_Dec.__bases__)
                bases.insert(0, ns0.removeRegistrationResponse_Def)
                ns0.removeRegistrationResponse_Dec.__bases__ = tuple(bases)

            ns0.removeRegistrationResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "removeRegistrationResponse_Dec_Holder"

# end class ns0 (tns: http://session.dm.rs.fnal.gov/)
