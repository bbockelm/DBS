##################################################
# file: RSSessionEJBBeanService_client.py
# 
# client stubs generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#     ./wsdl2py RSSessionEJB.wsdl
# 
##################################################

from RSSessionEJBBeanService_types import *
import urlparse, types
from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
from ZSI.schema import GED, GTD
import ZSI

# Locator
class RSSessionEJBBeanServiceLocator:
    RSSessionEJBBeanPort_address = "http://cmsdbssrv.cern.ch/rs-rsejb/RSSessionEJB"
    #RSSessionEJBBeanPort_address = "http://venom.dhcp.fnal.gov:8080/rs-rsejb/RSSessionEJB"
    def getRSSessionEJBBeanPortAddress(self):
        return RSSessionEJBBeanServiceLocator.RSSessionEJBBeanPort_address
    def getRSSessionEJBBeanPort(self, url=None, **kw):
        return RSSessionEJBWebServiceBindingSOAP(url or RSSessionEJBBeanServiceLocator.RSSessionEJBBeanPort_address, **kw)

# Methods
class RSSessionEJBWebServiceBindingSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: addRegistration
    def addRegistration(self, request, **kw):
        if isinstance(request, RSSessionEJBWebService_addRegistration) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RSSessionEJBWebService_addRegistrationResponse.typecode)
        return response

    # op: queryRegistrationFindAll
    def queryRegistrationFindAll(self, request, **kw):
        if isinstance(request, RSSessionEJBWebService_queryRegistrationFindAll) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RSSessionEJBWebService_queryRegistrationFindAllResponse.typecode)
        return response

    # op: queryRegistrationFindByAlias
    def queryRegistrationFindByAlias(self, request, **kw):
        if isinstance(request, RSSessionEJBWebService_queryRegistrationFindByAlias) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RSSessionEJBWebService_queryRegistrationFindByAliasResponse.typecode)
        return response

    # op: queryRegistrationFindByURL
    def queryRegistrationFindByURL(self, request, **kw):
        if isinstance(request, RSSessionEJBWebService_queryRegistrationFindByURL) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RSSessionEJBWebService_queryRegistrationFindByURLResponse.typecode)
        return response

    # op: removeRegistration
    def removeRegistration(self, request, **kw):
        if isinstance(request, RSSessionEJBWebService_removeRegistration) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RSSessionEJBWebService_removeRegistrationResponse.typecode)
        return response

RSSessionEJBWebService_addRegistration = GED("http://session.dm.rs.fnal.gov/", "addRegistration").pyclass

RSSessionEJBWebService_addRegistrationResponse = GED("http://session.dm.rs.fnal.gov/", "addRegistrationResponse").pyclass

RSSessionEJBWebService_queryRegistrationFindAll = GED("http://session.dm.rs.fnal.gov/", "queryRegistrationFindAll").pyclass

RSSessionEJBWebService_queryRegistrationFindAllResponse = GED("http://session.dm.rs.fnal.gov/", "queryRegistrationFindAllResponse").pyclass

RSSessionEJBWebService_queryRegistrationFindByAlias = GED("http://session.dm.rs.fnal.gov/", "queryRegistrationFindByAlias").pyclass

RSSessionEJBWebService_queryRegistrationFindByAliasResponse = GED("http://session.dm.rs.fnal.gov/", "queryRegistrationFindByAliasResponse").pyclass

RSSessionEJBWebService_queryRegistrationFindByURL = GED("http://session.dm.rs.fnal.gov/", "queryRegistrationFindByURL").pyclass

RSSessionEJBWebService_queryRegistrationFindByURLResponse = GED("http://session.dm.rs.fnal.gov/", "queryRegistrationFindByURLResponse").pyclass

RSSessionEJBWebService_removeRegistration = GED("http://session.dm.rs.fnal.gov/", "removeRegistration").pyclass

RSSessionEJBWebService_removeRegistrationResponse = GED("http://session.dm.rs.fnal.gov/", "removeRegistrationResponse").pyclass
