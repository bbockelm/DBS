##################################################
# file: RunSeqWSImplService_client.py
# 
# client stubs generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#     /home/sekhri/zsi/ZSI-2.1-a1/scripts/wsdl2py RSWebService.wsdl
# 
##################################################

from RunSeqWSImplService_types import *
import urlparse, types
from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
from ZSI.schema import GED, GTD
import ZSI

# Locator
class RunSeqWSImplServiceLocator:
    #RunSeqWSImplPort_address = "http://cmssrv48.fnal.gov:8585/rss/RSWebService"
    RunSeqWSImplPort_address = "http://cmsdbssrv.cern.ch/rss/RSWebService"
    def getRunSeqWSImplPortAddress(self):
        return RunSeqWSImplServiceLocator.RunSeqWSImplPort_address
    def getRunSeqWSImplPort(self, url=None, **kw):
        return RunSeqWSImplPortBindingSOAP(url or RunSeqWSImplServiceLocator.RunSeqWSImplPort_address, **kw)

# Methods
class RunSeqWSImplPortBindingSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: getCurrRunNumber
    def getCurrRunNumber(self, request, **kw):
        if isinstance(request, getCurrRunNumber) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getCurrRunNumberResponse.typecode)
        return response

    # op: getNextRunNumber
    def getNextRunNumber(self, request, **kw):
        if isinstance(request, getNextRunNumber) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getNextRunNumberResponse.typecode)
        return response

    # op: createRunSequence
    def createRunSequence(self, request, **kw):
        if isinstance(request, createRunSequence) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(createRunSequenceResponse.typecode)
        return response

getCurrRunNumber = GED("http://service.dm.rss.fnal.gov/", "getCurrRunNumber").pyclass

getCurrRunNumberResponse = GED("http://service.dm.rss.fnal.gov/", "getCurrRunNumberResponse").pyclass

getNextRunNumber = GED("http://service.dm.rss.fnal.gov/", "getNextRunNumber").pyclass

getNextRunNumberResponse = GED("http://service.dm.rss.fnal.gov/", "getNextRunNumberResponse").pyclass

createRunSequence = GED("http://service.dm.rss.fnal.gov/", "createRunSequence").pyclass

createRunSequenceResponse = GED("http://service.dm.rss.fnal.gov/", "createRunSequenceResponse").pyclass
